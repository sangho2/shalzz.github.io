<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xml" href="https://shaleenjain.com/feed.xslt.xml"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Shaleen Jain</title>
    <subtitle>Personal and technical musings</subtitle>
    <link href="https://shaleenjain.com/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://shaleenjain.com" rel="alternate" type="text/html" />
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>Wed, 10 Jun 2020 00:00:00 +0000</updated>
    <id>https://shaleenjain.com/atom.xml</id>

    
    <author>
        <name>Shaleen Jain</name>
      
        <email>[object]</email>
      
      
    </author>
    
    <entry xml:lang="en">
        <title>Giving Power Back to the Indian People</title>
        <link href="https://shaleenjain.com/blog/federal-system-india/" type="text/html"/>
        <published>Wed, 10 Jun 2020 00:00:00 +0000</published>
        <updated>Wed, 10 Jun 2020 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/federal-system-india/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/federal-system-india/">&lt;h2 id=&quot;closer-to-the-people-governance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#closer-to-the-people-governance&quot; aria-label=&quot;Anchor link for: closer-to-the-people-governance&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Closer to the people Governance&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This is my rough draft on points I think are important to have a health
people-centric democracy. I&#x27;ll update this post after I try and expand these
points to make them more coherent when I get the time to learn and research
more about political science. I&#x27;m publishing this in its current unfinished
form in the hope that someone else can take a cue from this in the mean time.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;mayor-system&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#mayor-system&quot; aria-label=&quot;Anchor link for: mayor-system&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Mayor system&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Mayor and the Council System&lt;&#x2F;li&gt;
&lt;li&gt;Individual Representatives Elected at district level&lt;&#x2F;li&gt;
&lt;li&gt;District Representatives form a Council to the city&#x2F;town&lt;&#x2F;li&gt;
&lt;li&gt;Council Members vote to elect a Mayor of the city&#x2F;town&#x2F;state&lt;&#x2F;li&gt;
&lt;li&gt;Parties allowed to form but representatives stand as independent candidates
i.e no party ticket required and cannot assume a party manifesto as candidates
manifesto or fight only on the basis of being a party member.&lt;&#x2F;li&gt;
&lt;li&gt;Parties play a roll only at and above the Council level.&lt;&#x2F;li&gt;
&lt;li&gt;More than two parties considered healthy&lt;&#x2F;li&gt;
&lt;li&gt;Mayors of cities&#x2F;states vote to elect one among themselves as the Prime Minister.&lt;&#x2F;li&gt;
&lt;li&gt;Alternatively Mayors vote to elect two&#x2F;three Prime Minister Candidates among
themselves who fight for the peoples vote to become the Prime Minister.&lt;&#x2F;li&gt;
&lt;li&gt;Once a Mayor is elected as the Prime Minister, that Mayor&#x27;s council votes again to
elect another mayor for the city&#x2F;state.&lt;&#x2F;li&gt;
&lt;li&gt;Any Individual convicted of a major crime (more than 5 years in jail) cannot run
as a candidate for state or federal government.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;state-independence&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#state-independence&quot; aria-label=&quot;Anchor link for: state-independence&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
State Independence&lt;&#x2F;h3&gt;
&lt;p&gt;Majority of power at the lowest levels.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Independent State Governments&lt;&#x2F;li&gt;
&lt;li&gt;State Governments are completely independent. Can chose to enact their own laws.&lt;&#x2F;li&gt;
&lt;li&gt;Federal Laws need majority approval from all states.&lt;&#x2F;li&gt;
&lt;li&gt;State Governments control all local laws, municipal corporations,
Public sector Utilities (PSU), Police, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;political-accountability&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#political-accountability&quot; aria-label=&quot;Anchor link for: political-accountability&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Political Accountability&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;People can via protests, debates, civil right law suites and court rulings decide
to remove a Mayor from office before his term is over.&lt;&#x2F;li&gt;
&lt;li&gt;In case a Mayor is removed before his term is over either the council elects another
Mayor or fresh elections for the complete council are held.&lt;&#x2F;li&gt;
&lt;li&gt;The police is directly answerable to the Mayor and his&#x2F;her council.
Federal Government cannot and should not interfere with the local police of a
state.&lt;&#x2F;li&gt;
&lt;li&gt;The police is also accountable to the people via the Judiciary system, Journalism
and various independent&#x2F;federal anti-corruption, anti-abuse of power departments conducting
yearly audits and inspections.&lt;&#x2F;li&gt;
&lt;li&gt;The judiciary maintains a district attorney office that has the power to prosecute
and bring to court any government official in the police force,
state government or the federal government and can bring lawsuits on its own
or on behalf of a citizen.&lt;&#x2F;li&gt;
&lt;li&gt;A clear distinction between police and military to be maintained at all times.&lt;&#x2F;li&gt;
&lt;li&gt;At no point is it justified to militarise the police.&lt;&#x2F;li&gt;
&lt;li&gt;Community-led policing show be encourages and enforced in rural areas&#x2F;low density
areas and not have a state back police in force.&lt;&#x2F;li&gt;
&lt;li&gt;Areas that do have an active police force will be under the purview of a civilian
oversight committee to keep in check abuse of power and conflicts of interests.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;abuse-of-powers-due-to-ambiguity-in-laws&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#abuse-of-powers-due-to-ambiguity-in-laws&quot; aria-label=&quot;Anchor link for: abuse-of-powers-due-to-ambiguity-in-laws&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Abuse of powers due to ambiguity in laws&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;No political party can contest for elections with a religious motive or have any
specific religious issues as part of their manifesto to uphold the constitution
right of secularism (This has to be enforced by the Election Commission among others).&lt;&#x2F;li&gt;
&lt;li&gt;Freedom of Speech and right to expression should have a overriding effect,
be clarified and all possible major violations should be listed.&lt;&#x2F;li&gt;
&lt;li&gt;Ambiguities in free speech should be cleared and rights of citizens towards
free speech should be explained and made aware to every citizen.
(Though awareness campaigns, at court proceedings,  at the time of arrest
and various NGO&#x27;s and organisations)&lt;&#x2F;li&gt;
&lt;li&gt;Any law that aims to preemptively arrest, prosecute or justify violence or police
action leading to lose of life or fundamental rights of citizens with the pretense
of preventing a crime or harm to anyone or general public cannot be allowed due to undermining
civil liberties and general abuse of power. Any such actions if absolutely
necessary has to be taken with explicit permission from a public court.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;effect&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#effect&quot; aria-label=&quot;Anchor link for: effect&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Effect&lt;&#x2F;h3&gt;
&lt;p&gt;This brings the question; How does a democratic society goes on to bring about a
change as drastic as some of these to the point of needing to redraft the constitution.&lt;&#x2F;p&gt;
&lt;p&gt;It is clear that a system is resistant to change to anything that undermines the
fundamental structure of a system: in other words a broken system cannot possibly
be used to fix that very system.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore, we as a society, need to be aware of this and come up with means of
overthrowing a governance model that is by consensus broken beyond repair.&lt;&#x2F;p&gt;
&lt;p&gt;Some of the traditional mechanisms so far have been that have been used:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Large scale Protests&lt;&#x2F;li&gt;
&lt;li&gt;Armed Revolution&lt;&#x2F;li&gt;
&lt;li&gt;Civil War Movements&lt;&#x2F;li&gt;
&lt;li&gt;Non-Violent Revolution (but self-inflicting violence; hunger strikes, shutdown strikes, etc)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>

        
          <category term="political, governance, federal modal, india, indian governance, indian government, federal government of india," />
        

        
          <summary type="html">ðŸ”—
Closer to the people Governance

This is my rough draft on points I think are important to have a health
people-centric democracy. I&#x27;ll update this post after I try and expand these
points to make them more coherent when I get the time to learn and research
more about political science. I&#x27;m publishing this in its current unfinished
form in the hope that someone else can take a cue from this in the mean time.

</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>Home Media Streaming Server with Wireguard and OpenWRT</title>
        <link href="https://shaleenjain.com/blog/streaming-server/" type="text/html"/>
        <published>Sun, 01 Dec 2019 00:00:00 +0000</published>
        <updated>Sun, 01 Dec 2019 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/streaming-server/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/streaming-server/">&lt;h3 id=&quot;background-and-motivation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#background-and-motivation&quot; aria-label=&quot;Anchor link for: background-and-motivation&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Background and motivation&lt;&#x2F;h3&gt;
&lt;p&gt;Long gone are the good ol&#x27; days when Netflix used to be the only streaming service
you subscribed to and sparingly shared with your friends and family
providing access to virtually every video content out there.
But now if you haven&#x27;t noticed there&#x27;s a new streaming service rolled out by 
every other big producer and publisher with their exclusive content as the only selling
point to drive adoption.&lt;&#x2F;p&gt;
&lt;p&gt;In this new world, for some it&#x27;s perfectly reasonable to subscribe to every
service exclusively streaming the new TV series. For others it&#x27;s the constant
juggle between one or two services every month.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;If like me you don&#x27;t have any qualms with piracy and are relatively safe from
law enforcement in your jurisdiction then you might say there&#x27;s an easy solution
and you&#x27;d not be alone. The fragmentation of the streaming market is the single
biggest reason for the subsequent re-rise of the piracy industry (&lt;a href=&quot;https:&#x2F;&#x2F;www.vice.com&#x2F;en_us&#x2F;article&#x2F;d3q45v&#x2F;bittorrent-usage-increases-netflix-streaming-sites&quot;&gt;vice.com&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Pirating leads to some problems of it&#x27;s own though, that of storage space.
Deleting old files to make space for new downloads, being tied down to a single
device, scrubbing to exactly where you left off an episode on another device
after taking the pains to copy the gigabytes of data between devices.&lt;&#x2F;p&gt;
&lt;p&gt;This inspired me to come up with an alternative that solves most if not all
of the paper cuts from pirating.&lt;&#x2F;p&gt;
&lt;!-- toc --&gt;
&lt;h3 id=&quot;abstract&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#abstract&quot; aria-label=&quot;Anchor link for: abstract&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Abstract&lt;&#x2F;h3&gt;
&lt;p&gt;This is an overview of how you can effectively have your own streaming server 
with zero running costs, setup at your home with consumer hardware you most likely
already own, allowing you to stream your entire media library via your WI-FI 
connection when you&#x27;re at home and through a &lt;a href=&quot;https:&#x2F;&#x2F;wireguard.com&quot;&gt;Wireguard&lt;&#x2F;a&gt; VPN connecting to your home
router when you&#x27;re on the move.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;prerequisites&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#prerequisites&quot; aria-label=&quot;Anchor link for: prerequisites&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Prerequisites&lt;&#x2F;h3&gt;
&lt;p&gt;Most of the hardware used here is pretty standard and should be easy to acquire.
But this whole setup is contingent on having a router with &lt;a href=&quot;https:&#x2F;&#x2F;openwrt.org&quot;&gt;OpenWRT&lt;&#x2F;a&gt; installed
or one that is supported by the OpenWRT project and you are not afraid of tinkering
with you&#x27;re router to install OpenWRT on it yourself.
Besides the hardware requirements, general familiarity with *nix systems and
command line would make this very easy for you. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;disclaimer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#disclaimer&quot; aria-label=&quot;Anchor link for: disclaimer&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Disclaimer&lt;&#x2F;h3&gt;
&lt;p&gt;This is not going to be a step-by-step tutorial since the underlying technology
and the CLI is constantly evolving and changing. Rather I&#x27;m going to just
describe the architecture and link to the OpenWRT wiki where necessary.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ingredients-requirements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ingredients-requirements&quot; aria-label=&quot;Anchor link for: ingredients-requirements&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Ingredients&#x2F;Requirements&lt;&#x2F;h3&gt;
&lt;p&gt;The actual hardware requirements are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A recent router with at least one USB port and OpenWRT installed.&lt;&#x2F;li&gt;
&lt;li&gt;A portable USB hard-drive&#x2F;SSD or a NAS box with a USB connection.&lt;&#x2F;li&gt;
&lt;li&gt;An Ethernet cable in case you mess up your WiFi&#x2F;firewall config.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#architecture&quot; aria-label=&quot;Anchor link for: architecture&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;Our Software stack would comprise of mainly these four main technologies
each of which I will explain in detail:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Samba server: Filesystem over the Network.&lt;&#x2F;li&gt;
&lt;li&gt;Wireguard peers: A secure VPN&lt;&#x2F;li&gt;
&lt;li&gt;libtransmission: A torrent client&lt;&#x2F;li&gt;
&lt;li&gt;DDNS: Dynamic DNS to update our router IP address to a DNS record.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;figure style=&quot;width:75%;margin:auto;&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;shaleenjain.com&amp;#x2F;processed_images&amp;#x2F;480978d3734bd84200.png&quot;  &#x2F;&gt;
&lt;figcaption style=&quot;text-align:center;&quot;&gt;Fig 1: Network Architecture&lt;&#x2F;figcaption&gt;
&lt;br&#x2F;&gt;
&lt;&#x2F;figure&gt;
&lt;h4 id=&quot;samba&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#samba&quot; aria-label=&quot;Anchor link for: samba&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Samba&lt;&#x2F;h4&gt;
&lt;p&gt;The premiss of our setup is having a Network Attached Storage (NAS). Off the shelf
NAS boxes are generally more expensive but they do allow you to setup hard-drives
in a RAID configuration providing redundancy and backup. If you already have a 
NAS box you can use it instead otherwise if you&#x27;re not doing any content creation
and don&#x27;t need high write throughput then a single drive is more than enough.&lt;&#x2F;p&gt;
&lt;p&gt;There are two main filesystem-over-the-network solutions&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;NFS: the Linux native Network File System.&lt;&#x2F;li&gt;
&lt;li&gt;Server Message Block (SMB): A widely supported protocol with Microsoft&#x27;s
own implementation for Windows.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Since SMB is a more widely supported protocol and we need to be able to access our
NAS from any client device including Windows and MacOS we will be using Samba,
a SMB implementation for Linux.&lt;&#x2F;p&gt;
&lt;p&gt;You can find the details on &lt;a href=&quot;https:&#x2F;&#x2F;openwrt.org&#x2F;docs&#x2F;guide-user&#x2F;services&#x2F;nas&#x2F;cifs.server&quot;&gt;how to setup Samba&lt;&#x2F;a&gt; on OpenWRT on the wiki.&lt;&#x2F;p&gt;
&lt;p&gt;To Access the Samba drive from a client point it to the IP address of your router.
For example if you router has an IP address &lt;code&gt;192.168.1.1&lt;&#x2F;code&gt; then you can access the
drive at &lt;code&gt;smb:&#x2F;&#x2F;192.168.1.1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wireguard&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wireguard&quot; aria-label=&quot;Anchor link for: wireguard&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Wireguard&lt;&#x2F;h4&gt;
&lt;p&gt;Wireguard is a new modern and secure VPN in-built into the Linux kernel that is based
on public key cryptography for peer verification and authentication.
Wireguard is simple to setup yet performant making it the ideal VPN
to use on embedded devices like home routers unlike OpenVPN which has a 
huge dependency on OpenSSL which takes up a lot more flash storage space
as well as being highly CPU intensive.&lt;&#x2F;p&gt;
&lt;p&gt;Setting up wireguard on OpenWRT is not very different from setting it up on any
other device besides installing the required packages which you can find &lt;a href=&quot;https:&#x2F;&#x2F;openwrt.org&#x2F;docs&#x2F;guide-user&#x2F;services&#x2F;vpn&#x2F;wireguard&#x2F;start&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For a better more general guide to configuring wireguard see this excellent &lt;a href=&quot;https:&#x2F;&#x2F;www.stavros.io&#x2F;posts&#x2F;how-to-configure-wireguard&#x2F;&quot;&gt;blog
post&lt;&#x2F;a&gt; by Stavros Korokithakis.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;transmission&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#transmission&quot; aria-label=&quot;Anchor link for: transmission&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Transmission&lt;&#x2F;h4&gt;
&lt;p&gt;libtransmission is a small library to easily download torrents onto any 
device though for it to be useful you often have to pull in at least one
additional library that interacts with libtransmission over RPC.
Only caveat with libtransmission I faced especially on my router was that 
it put a non-trivial CPU load while actively downloading a torrent, I&#x27;m not sure
if it&#x27;s because of my CPU not being capable enough or me having something misconfigured.
But it&#x27;s generally not an issue if you don&#x27;t have something downloading 24&#x2F;7.&lt;&#x2F;p&gt;
&lt;p&gt;Details on how to install and configure transmission are &lt;a href=&quot;https:&#x2F;&#x2F;openwrt.org&#x2F;docs&#x2F;guide-user&#x2F;services&#x2F;downloading_and_filesharing&#x2F;transmission&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once you have everything setup correctly along with wireguard you can effectively
login from anywhere and queue up a torrent to download with the full bandwidth
of your home connection directly onto the hard drive connected to your router.&lt;&#x2F;p&gt;
&lt;figure style=&quot;width:85%;margin:auto;&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;shaleenjain.com&amp;#x2F;processed_images&amp;#x2F;e67f5e31147185fb00.png&quot;  &#x2F;&gt;
&lt;figcaption style=&quot;text-align:center;&quot;&gt;Fig 2: Transmission Web running on a home router&lt;&#x2F;figcaption&gt;
&lt;br&#x2F;&gt;
&lt;&#x2F;figure&gt;
&lt;h4 id=&quot;ddns&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ddns&quot; aria-label=&quot;Anchor link for: ddns&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
DDNS&lt;&#x2F;h4&gt;
&lt;p&gt;This is something we shouldn&#x27;t really need but alas we require unless you have a static
IP connection for your home!
With the way wireguard works we need to know the IP addresses of all our peers
we wish to connect to. There is some work going on that could make wireguard work
with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WireGuard&#x2F;wg-dynamic&#x2F;blob&#x2F;master&#x2F;docs&#x2F;idea.md&quot;&gt;dynamic IP address&lt;&#x2F;a&gt; but until that is stabilised we need to use hacks such
as DDNS.&lt;&#x2F;p&gt;
&lt;p&gt;Majority of ISPs allocate a new IP address to home gateways every time it tries
to connect. DDNS is an old and reliable way for to be updated every time the IP address
changes.&lt;&#x2F;p&gt;
&lt;p&gt;Details on how to get DDNS working on OpenWRT can be found &lt;a href=&quot;https:&#x2F;&#x2F;openwrt.org&#x2F;docs&#x2F;guide-user&#x2F;base-system&#x2F;ddns&quot;&gt;here&lt;&#x2F;a&gt;.
There are some recommendation of good DDNS providers on the wiki. I personally 
prefer to use &lt;a href=&quot;https:&#x2F;&#x2F;www.dynu.com&#x2F;en-US&#x2F;DynamicDNS&quot;&gt;dynu&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;www.dnsomatic.com&#x2F;&quot;&gt;DNS-o-Matic&lt;&#x2F;a&gt;.
DNS-o-Matic allows you to multiplex to various DDNS providers making sure you have
backups in case of any DNS outage.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;After this I hope you have a better idea of how you can run your own media streaming
server and tune it to your own liking. If you liked it please share with others
and help spread the decentralization of the internet and be in control of you own
data and preferences.&lt;&#x2F;p&gt;
</content>

        
          <category term="openwrt, wireguard, streaming, video, media, home media, samba server, samba, torrent, transmission, netflix, piracy, netflix alternative, home server, openwrt samba, nas, ddns, network attached storage, home media server, media server, nas with openwrt" />
        

        
          <summary type="html">ðŸ”—
Background and motivation
Long gone are the good ol&#x27; days when Netflix used to be the only streaming service
you subscribed to and sparingly shared with your friends and family
providing access to virtually every video content out there.
But now if you haven&#x27;t noticed there&#x27;s a new streaming service rolled out by 
every other big producer and publisher with their exclusive content as the only selling
point to drive adoption.
In this new world, for some it&#x27;s perfectly reasonable to subscribe to every
service exclusively streaming the new TV series. For others it&#x27;s the constant
juggle between one or two services every month.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>The Year of Blockchain</title>
        <link href="https://shaleenjain.com/blog/the-year-of-blockchain/" type="text/html"/>
        <published>Mon, 22 Jul 2019 00:00:00 +0000</published>
        <updated>Mon, 22 Jul 2019 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/the-year-of-blockchain/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/the-year-of-blockchain/">&lt;p&gt;The year of 2019 has been a wild ride for the blockchain industry.
The looming ban on cryptocurrencies by the Indian government and the leak of a
draft bill that proposes a 10 year jail term.
The long awaited end of crypto winter with bitcoin reaching a high of $13,000 and
hovering around $10,000 as of this writing.
The announcement of a &amp;quot;cryptocurrency&amp;quot;
by Facebook and their plans to make it a global stable digital coin.&lt;&#x2F;p&gt;
&lt;p&gt;These all might seem like unrelated events but they all point to one thing,
the blockchain and cryptocurrencies ecosystem has reached a level of maturity
that big tech companies and democratic governments around the world are not only
taking notice but are taking proactive steps to adopt and regulate the industry.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Andreas M. Antonopoulos lists out &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=SMEOKDVXlUo&amp;amp;t=1490s&quot;&gt;three elements&lt;&#x2F;a&gt; to success in this industry:
Market, Timing and Sequencing.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Market&lt;&#x2F;em&gt;: At this point we can all agree there is a market for cryptocurrencies
and gaps in the financial system that bitcoin and others fill.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Timing&lt;&#x2F;em&gt;: After the 2008 stock market crash and the Nov 2016 demonetisation by the
Indian government, people are seeing the frailty of the traditional
financial systems and their faith that their money is safe is diminishing.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Sequencing&#x2F;Prerequisites&lt;&#x2F;em&gt;: Andreas describes this as having density of adoption
of the underlying technology. In the case of internet, layer 2 solutions like
Facebook and Google where possible only because email drove the adoption of the
internet to the point where everyone had to have email for work. This insured there
were enough users already on the internet, the infrastructure was already laid out
and people had the technical skills to navigate the internet.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;currency-is-the-email-of-blockchain&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#currency-is-the-email-of-blockchain&quot; aria-label=&quot;Anchor link for: currency-is-the-email-of-blockchain&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Currency is the email of blockchain&lt;&#x2F;h3&gt;
&lt;p&gt;Here I&#x27;ll try and describe how the latest circumstances will help accelerate the
adoption of the blockchain technologies.&lt;&#x2F;p&gt;
&lt;p&gt;First, the Indian governments proposed &lt;a href=&quot;https:&#x2F;&#x2F;dea.gov.in&#x2F;sites&#x2F;default&#x2F;files&#x2F;Approved%20and%20Signed%20Report%20and%20Bill%20of%20IMC%20on%20VCs%2028%20Feb%202019.pdf&quot;&gt;draft bill&lt;&#x2F;a&gt; blanket banning the
use and holding of cryptocurrencies of any kind.
This might seem to be disengaging for the use and spread of cryptocurrency within
the Indian economy but unlike the ban by china after which much of the draft bill
is modeled after, the Indian government does not have neither the judicial right
to block any &lt;abbr title=&quot;peer to peer&quot;&gt;p2p&lt;&#x2F;abbr&gt; network traffic nor the technical
infrastructure to implement anything similar to the Great Firewall of China.
Rather the unintended effect of the proposal and approval of this bill will be
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Streisand_effect&quot;&gt;Streisand effect&lt;&#x2F;a&gt;. Where the fact that the government is going out of their
way to block and ban a neural technology. Disallowing it&#x27;s use to the people will
spark interest and widespread awareness about this topic and what probable cause
or justification the government might have to ban such a technology.&lt;&#x2F;p&gt;
&lt;p&gt;The bill will take away any last hope of businesses and startups working
on anything even close to cryptocurrencies and blockchains in India and in the process
lose any strategic and technological superiority against other countries.
Though the government with its limited resources and knowledge about the blockchain
technology and its use cases will not be able to prevent the p2p and decentralized use
of the technology, which are precisely the requirements that bitcoin and
others aim to fulfill. Albeit many business will not be to accept bitcoin upfront
and do not anyways do so due to its currently limited transactional throughput
capabilities, people will not cease to buy and invest in what they will see as
an excellent store of value akin to digital gold and few will even continue to
trade.&lt;&#x2F;p&gt;
&lt;p&gt;The government in its draft bill has effectively proposed a ban on the flow and
storage of information where anyone holding 12 words on a piece of paper representing
their digital wallets private keys will be prosecuted and sentenced to a possible
of 10 years in jail. This is nothing short of a surveillance state trying their
best to siphon and hold onto any control and power they can, withstanding
the title of the worlds largest democracy.&lt;&#x2F;p&gt;
&lt;p&gt;Second, the announcement and launch of &lt;a href=&quot;https:&#x2F;&#x2F;libra.org&#x2F;en-US&#x2F;&quot;&gt;libra&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;calibra.com&#x2F;&quot;&gt;calibra&lt;&#x2F;a&gt; by Facebook
which is their own cryptocurrency described as a global digital coin
pegged to a basket of fiat currencies.
A lot of people have rightly said Facebook&#x27;s libra is &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=MmEr2VZrjmE&quot;&gt;not a blockchain&lt;&#x2F;a&gt; with none
of the characteristics and principals that govern a cryptocurrency like
bitcoin. But Facebook&#x27;s libra is close enough to maybe fools regulators and governments
and if they are successful in launching libra, it will bring positive regulations
for cryptocurrencies by complying with the governments KYC and AML requirements
from a wallets point of view but having no such requirements or restrictions on
the protocol or the libra association level.&lt;&#x2F;p&gt;
&lt;p&gt;Facebook&#x27;s libra plans to operate in a grey area where it complies with
traditional laws on the surface but also has enough cracks for people
to slip into the system through its &amp;quot;on and off ramps&amp;quot; that might not
be as well regulated as Facebook&#x27;s own wallet outside the U.S.
Even if we say for arguments sake that all the &amp;quot;on and off ramps&amp;quot; will be properly
regulated, people will still be able to transact in a p2p manner using non-custodial
wallets which will be possible going by the libra&#x27;s testnet software release.&lt;&#x2F;p&gt;
&lt;p&gt;Facebook knows it too big to be banned by any one government and who knows
their current plans may change in the future where they might pull a bait and switch
with the regulators by moving from a permissioned system to a permissionless system
described as part of their roadmap on their site. If that happens they will no
longer be able to exert any definite control on their currency outside of their wallet.&lt;&#x2F;p&gt;
&lt;p&gt;This is obviously good for the adoption of cryptocurrencies and hence blockchains
as a whole. With Libra Facebook will introduce possibly all of their 2.4 billion users to the
world of cryptocurrencies even though it is not exactly a cryptocurrency at this
time, similar to how AOL introduced people to a permissioned&#x2F;walled version of internet.&lt;&#x2F;p&gt;
&lt;p&gt;Third, the continued development and launch of more performant and scalable blockchains,
iterating and innovating on the technology first described in the bitcoin white paper
including the Bitcoin Lightning Network and Ethereum 2.0
will provide the infrastructure to support the influx of more users
and drive the adoption as well as the development, discovery and use of 2nd layer
blockchain solutions, bringing the open and decentralized nature of blockchains
and the decentralized internet to different industries and use cases.&lt;&#x2F;p&gt;
&lt;p&gt;The above events concluding in a scenario with even the slightest similarity might
just result in 2020 being the year of blockchain.&lt;&#x2F;p&gt;
</content>

        
          <category term="blockchain, bitcoin, ban, cryptocurrencies, cryptocurrency, ethereum, india, libra, facebook, crypto ban, calibra" />
        

        
          <summary type="html">The year of 2019 has been a wild ride for the blockchain industry.
The looming ban on cryptocurrencies by the Indian government and the leak of a
draft bill that proposes a 10 year jail term.
The long awaited end of crypto winter with bitcoin reaching a high of $13,000 and
hovering around $10,000 as of this writing.
The announcement of a &amp;quot;cryptocurrency&amp;quot;
by Facebook and their plans to make it a global stable digital coin.
These all might seem like unrelated events but they all point to one thing,
the blockchain and cryptocurrencies ecosystem has reached a level of maturity
that big tech companies and democratic governments around the world are not only
taking notice but are taking proactive steps to adopt and regulate the industry.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>Blogging: From Jekyll to Zola</title>
        <link href="https://shaleenjain.com/blog/switching-blog-to-zola/" type="text/html"/>
        <published>Fri, 01 Feb 2019 00:00:00 +0000</published>
        <updated>Fri, 01 Feb 2019 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/switching-blog-to-zola/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/switching-blog-to-zola/">&lt;p&gt;When I first created this blog I used &lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&quot;&gt;Jekyll&lt;&#x2F;a&gt; for my blogging needs mostly
because that was the first
time I had come across the concept of a Static Site Generator (SSG),
generating html from markdown posts
and Jekyll was and still is the most popular SSG to date. Also because of GitHub&#x27;s
free hosting for Jekyll sites.&lt;&#x2F;p&gt;
&lt;p&gt;Jekyll gained its popularity by being a simple yet powerful framework.
It combined the Liquid templating language with a markdown processor to create 
an engine that spits out a completely static website with no database or any dependencies.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Once you have or create a theme you can focus on what matters the most,
writing the content, without worrying about the formatting or the layout or the
specifies of a markup language like HTML while you are in the thought process
of writing a blog.&lt;&#x2F;p&gt;
&lt;p&gt;With Markdown you can still control how the text looks and add addition images
and links which makes it a lot better to compose and write than HTML.
A pleasant offline writing experience and ease of development 
is what makes Jekyll and SSGs as a whole great.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#performance&quot; aria-label=&quot;Anchor link for: performance&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Performance&lt;&#x2F;h2&gt;
&lt;p&gt;Jekyll has a lot of great themes made by available by generous people which
makes it easy to pick one, customise it and start blogging. It does have
a short learning curve though and once you start writing a lot more posts you have to
consider the performance of how long it&#x27;s taking to actually generate the site
from your posts.&lt;&#x2F;p&gt;
&lt;p&gt;Building 15 pages without LSI and a atom feed generation and jekyll-assets
plugin for image processing takes &lt;code&gt;56.202 seconds&lt;&#x2F;code&gt;. That&#x27;s a long time!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ bundle exec jekyll build
Configuration file: &#x2F;home&#x2F;shalzz&#x2F;dev&#x2F;shalzz.github.io&#x2F;_config.yml
            Source: &#x2F;home&#x2F;shalzz&#x2F;dev&#x2F;shalzz.github.io
       Destination: &#x2F;home&#x2F;shalzz&#x2F;dev&#x2F;shalzz.github.io&#x2F;_site
 Incremental build: disabled. Enable with --incremental
      Generating...
       Jekyll Feed: Generating feed for posts
                    done in 56.202 seconds.
 Auto-regeneration: disabled. Use --watch to enable.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On subsequent builds with incremental build enabled, it takes &lt;code&gt;2.89 seconds&lt;&#x2F;code&gt;.
Much better but still slow.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ bundle exec jekyll build --incremental
Configuration file: &#x2F;home&#x2F;shalzz&#x2F;dev&#x2F;shalzz.github.io&#x2F;_config.yml
            Source: &#x2F;home&#x2F;shalzz&#x2F;dev&#x2F;shalzz.github.io
       Destination: &#x2F;home&#x2F;shalzz&#x2F;dev&#x2F;shalzz.github.io&#x2F;_site
 Incremental build: enabled
      Generating...
       Jekyll Feed: Generating feed for posts
                    done in 2.896 seconds.
 Auto-regeneration: disabled. Use --watch to enable.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;zola&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zola&quot; aria-label=&quot;Anchor link for: zola&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Zola&lt;&#x2F;h2&gt;
&lt;p&gt;I recently started learning &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.org&quot;&gt;Rust&lt;&#x2F;a&gt; and when I started looking around for a faster
alternative than Jekyll for my blog, I found &lt;a href=&quot;https:&#x2F;&#x2F;getzola.org&quot;&gt;Zola&lt;&#x2F;a&gt; a static site generator written
in Rust that compiles to a binary with performance much better
than Jekyll ( slightly slower than Hugo as of now ) since it&#x27;s a native binary
and has no runtime with no plugins and everything in built, it was perfect. &lt;&#x2F;p&gt;
&lt;p&gt;Compared to Jekyll&#x27;s Liquid template engine Zola uses Tera
as its template engine which is also written in Rust.
It has the same syntax plus the concept of &lt;code&gt;block&lt;&#x2F;code&gt;s that
can be inherited and overridden when you
extend a template from another template. If you are also looking at Hugo, Tera is a huge
step up from it&#x27;s Go based template language syntax.&lt;&#x2F;p&gt;
&lt;p&gt;After making some modifications to my sites layouts&#x2F;templates due to the subtle
difference between the two frameworks and their structuring I had now effectively
extracted my sites templates and CSS to its own &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shalzz&#x2F;butler&quot;&gt;theme&lt;&#x2F;a&gt; that can be reused by anyone else.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;performance-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#performance-1&quot; aria-label=&quot;Anchor link for: performance-1&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Performance&lt;&#x2F;h3&gt;
&lt;p&gt;Building 16 pages (including this one) with 8 images and no cache with Zola
takes only &lt;code&gt;0.13 seconds&lt;&#x2F;code&gt;.
Zola turns out to be an order of magnitude faster than Jekyll. That&#x27;s a huge improvement.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ zola build
Building site...
-&amp;gt; Creating 16 pages (0 orphan), 2 sections, and processing 8 images
Done in 130ms.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Combining an already fast engine with a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;features&#x2F;actions&quot;&gt;GitHub Action&lt;&#x2F;a&gt; that reuses a cached docker image
in the background, from a git push to being published on GitHub Pages takes on
average only ~20 seconds compared to Jekyll + Travis total time of ~2 minutes.&lt;&#x2F;p&gt;
&lt;p&gt;In the end I&#x27;m quite happy with Zola and it&#x27;s architecture and there&#x27;s more improvements
to come with Zola 0.6 and above.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#further-reading&quot; aria-label=&quot;Anchor link for: further-reading&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Further Reading&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;installation&#x2F;&quot;&gt;Zola Docs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.com&#x2F;docs&#x2F;templates&#x2F;#templates&quot;&gt;Tera Docs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;more-links&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-links&quot; aria-label=&quot;Anchor link for: more-links&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
More Links&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shalzz&#x2F;butler&quot;&gt;Zola theme - Butler&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;shalzz&#x2F;zola-deploy-action&quot;&gt;Zola Deploy GitHub Action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>

        
          <category term="blog, ssg, static-site, jekyll, zola, rust, SSG, static, site, blogging, hackers" />
        

        
          <summary type="html">When I first created this blog I used Jekyll for my blogging needs mostly
because that was the first
time I had come across the concept of a Static Site Generator (SSG),
generating html from markdown posts
and Jekyll was and still is the most popular SSG to date. Also because of GitHub&#x27;s
free hosting for Jekyll sites.
Jekyll gained its popularity by being a simple yet powerful framework.
It combined the Liquid templating language with a markdown processor to create 
an engine that spits out a completely static website with no database or any dependencies.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>DLNA&#x2F;UPNP casting support in VLC - Part 2</title>
        <link href="https://shaleenjain.com/blog/vlc-dlna-support-2/" type="text/html"/>
        <published>Sat, 12 Jan 2019 00:00:00 +0000</published>
        <updated>Sat, 12 Jan 2019 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/vlc-dlna-support-2/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/vlc-dlna-support-2/">&lt;p&gt;DLNA renderers, mainly TVâ€™s are DLNA certified devices that are able to play
any media from the local network and is built upon the UPnP A&#x2F;V Architecture technology.
This allows you to cast any video or audio from any other device to your connected TV.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;!-- toc --&gt;
&lt;h2 id=&quot;discoverying-devices&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#discoverying-devices&quot; aria-label=&quot;Anchor link for: discoverying-devices&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Discoverying Devices&lt;&#x2F;h2&gt;
&lt;p&gt;The next step in adding DLNA support was adding a &lt;code&gt;renderer_discovery&lt;&#x2F;code&gt;
module responsible for searching and adding devices that are Media Renderers i.e.
capable of playing a video&#x2F;audio stream that we may cast to it.&lt;&#x2F;p&gt;
&lt;p&gt;To do that we use the &lt;code&gt;libupnp&lt;&#x2F;code&gt; library to find the devices and call the
VLC &lt;code&gt;vlc_renderer_item_new()&lt;&#x2F;code&gt; function for each device with relevant information
so that they can be show to the user in a menu and then select which device to cast to.&lt;&#x2F;p&gt;
&lt;p&gt;Someone had partially done this before me but not yet merged, partly due to the problem
I explained and solved in the previous post of this series. After adapting that
patch we were now able to discover and list any DLNA renderers available
on the same network.&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;shaleenjain.com&amp;#x2F;processed_images&amp;#x2F;75db85a38c0c447f00.jpg&quot;  &#x2F;&gt;
&lt;h2 id=&quot;casting-to-the-device&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#casting-to-the-device&quot; aria-label=&quot;Anchor link for: casting-to-the-device&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Casting to the Device&lt;&#x2F;h2&gt;
&lt;p&gt;Now to actually be able to cast to a device we need to create a &lt;code&gt;stream_out&lt;&#x2F;code&gt;
VLC module with http as the transport method. Much of that logic is similar to
how chromecast creates a &lt;code&gt;stream_out&lt;&#x2F;code&gt; except that we use UPnP Actions represented
as SOAP requests instead of the horror that is Google&#x27;s protobuf to talk to the device.&lt;&#x2F;p&gt;
&lt;p&gt;After going through the DLNA guidelines and the UPnP AV spec, I added functions
that called the actions required to talk to any DLNA device implementing the AVTransport Service
and we had a working implementation of VLC acting as a UPnP control point that
was able to cast to almost all DLNA renderers.&lt;&#x2F;p&gt;
&lt;p&gt;I say almost all because legacy DLNA renderers (below DLNA v1.5) and renderers
not implementing the &lt;code&gt;AVTransport::SetAVTransportURI&lt;&#x2F;code&gt; action are not yet supported.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;device-media-formats&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#device-media-formats&quot; aria-label=&quot;Anchor link for: device-media-formats&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Device Media Formats&lt;&#x2F;h2&gt;
&lt;p&gt;Having a working tranport is still half of story, another important aspect of casting is to make
sure the device is able to decode the file that you are trying to play.
To solve this I had to call the &lt;code&gt;ConnectionManager::GetProtocolInfo()&lt;&#x2F;code&gt; action
to get a CSV list of all the Media formats supported by the device, maintain
a manual list of all possible Media format profiles defined by DLNA.org and others within VLC,
find a profile that best describes the file the user is trying to play and then
compare that profile to the device profiles to make sure if it can play it.&lt;&#x2F;p&gt;
&lt;p&gt;And if a device does not support the profile of the file we are trying to play
then we transcode the file to a format that the device supports, on the fly,
and stream it to the device.&lt;&#x2F;p&gt;
&lt;p&gt;As you can imagine this is quite an involved process more so with the transcoding
since we had to make sure the transcoding will work in a reasonable amount of time
on every platform VLC is run i.e. on Linux, Windows, MacOS, iOS and android
each of which has different platform APIs and SoCs&#x2F;Processors
and hence took up majority of my time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;future&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#future&quot; aria-label=&quot;Anchor link for: future&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Future&lt;&#x2F;h2&gt;
&lt;p&gt;There are still a few things left to add for a seamless experience with DLNA casting
in VLC.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;demux-filter&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#demux-filter&quot; aria-label=&quot;Anchor link for: demux-filter&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Demux Filter&lt;&#x2F;h3&gt;
&lt;p&gt;Due to the nature of VLC&#x27;s module system and its media processing pipeline, &lt;code&gt;stream_out&lt;&#x2F;code&gt;
modules cannot control the rate at which a video is decoded and sent out for display.
So things like pause, fast-forward and track sync between VLC and the DLNA device doesn&#x27;t
work properly yet.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a workaround to use &lt;code&gt;demux_filter&lt;&#x2F;code&gt; to control the pacing between the &lt;code&gt;demux&lt;&#x2F;code&gt;
and the &lt;code&gt;access_out&lt;&#x2F;code&gt; module using an IPC mechanisuim between the two modules,
even though they both run in the same process.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dlna-v1-5&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dlna-v1-5&quot; aria-label=&quot;Anchor link for: dlna-v1-5&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
DLNA v1.5&lt;&#x2F;h3&gt;
&lt;p&gt;DLNA v1.5 is a legacy DLNA spec version that has very strict requirements and cannot
easily play any supported media from the cloud. These requirements were removed
in later versions of the DLNA spec.&lt;&#x2F;p&gt;
&lt;p&gt;To support DLNA v1.5 Media Renderers (many old Samsung and Sony TVs) 
we need a DLNA v1.5 compliant HTTP server with the appropriate DLNA specific headers.
This is related to the &lt;code&gt;demux_filter&lt;&#x2F;code&gt; and can be easily implemented once we have that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#code&quot; aria-label=&quot;Anchor link for: code&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Code&lt;&#x2F;h2&gt;
&lt;p&gt;The merged commits can be found here:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;git.videolan.org&#x2F;?p=vlc.git;a=commit;h=0d89fe3fd7d27d7c3f349bb46a915dbae65c02f8&quot;&gt;upnp: add renderer discoverer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;git.videolan.org&#x2F;?p=vlc.git;a=commit;h=ec61edc0d0292ab37bb1dbafb23a8aed49e966bb&quot;&gt;chromecast: refactor out encoder option functions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;git.videolan.org&#x2F;?p=vlc.git;a=commit;h=7da4464ca093604f2a507e3b39330fed17838e62&quot;&gt;dlna: add a DLNA stream out&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;git.videolan.org&#x2F;?p=vlc.git;a=commit;h=0a34ce334a7c8b2d3926148be30f5b69fd253e41&quot;&gt;dlna: add GetProtocolInfo action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;git.videolan.org&#x2F;?p=vlc.git;a=commit;h=b671d3b3270790fd11aa3bc76cfe42f75ca25c52&quot;&gt;dlna: add PrepareForConnection action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;release&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#release&quot; aria-label=&quot;Anchor link for: release&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Release&lt;&#x2F;h2&gt;
&lt;p&gt;You can start casting to DLNA compliant devices using the next VLC 4.0 release
or the latest nightly&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#fn-warn&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;
releases for Windows, MacOS and Linux.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;fn-warn&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Warning: with any nightly release there may still be bugs that are not yet fixed.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>

        
          <category term="upnp, dlna, upnp&#x2F;dlna, dlna&#x2F;upnp, vlc, casting, stream, media, media renderer, renderer, dlna renderer" />
        

        
          <summary type="html">DLNA renderers, mainly TVâ€™s are DLNA certified devices that are able to play
any media from the local network and is built upon the UPnP A&#x2F;V Architecture technology.
This allows you to cast any video or audio from any other device to your connected TV.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>DLNA&#x2F;UPNP casting support in VLC - Part 1</title>
        <link href="https://shaleenjain.com/blog/vlc-dlna-support-1/" type="text/html"/>
        <published>Fri, 31 Aug 2018 00:00:00 +0000</published>
        <updated>Fri, 31 Aug 2018 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/vlc-dlna-support-1/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/vlc-dlna-support-1/">&lt;p&gt;The latest project that I have been working on lately is adding support for 
casting to DLNA&#x2F;UPNP renderers in VLC.&lt;&#x2F;p&gt;
&lt;p&gt;DLNA renderers, mainly TVâ€™s are DLNA certified devices that are able to play
any media from the local network and is built upon the UPnP A&#x2F;V Architecture technology.
This allows you to cast any video or audio from any other device to your connected TV.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This is similar to chromecast but was designed a lot earlier and unlike chromecast it is
a completely open protocol.&lt;&#x2F;p&gt;
&lt;p&gt;A lot of consumer electronics and television sets in the market are already 
DLNA certified even though they may not be marketed as a Smart TV.
You can search for existing DLNA certified products &lt;a href=&quot;https:&#x2F;&#x2F;spirespark.com&#x2F;dlna&#x2F;products&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-approach&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-approach&quot; aria-label=&quot;Anchor link for: the-approach&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
The Approach&lt;&#x2F;h3&gt;
&lt;p&gt;VLC already has support for &lt;a href=&quot;http:&#x2F;&#x2F;pupnp.sourceforge.net&#x2F;&quot;&gt;libupnp&lt;&#x2F;a&gt; and playing content from a DLNA&#x2F;UPnP Media Server
through it&#x27;s &lt;code&gt;services_discovery&lt;&#x2F;code&gt; interface. Through the addition of the 
&lt;code&gt;renderer_discovery&lt;&#x2F;code&gt; interface it was now also possible to add support for 
discovering and casting media to a DLNA&#x2F;UPnP Media Renderer.&lt;&#x2F;p&gt;
&lt;p&gt;Of course possibility and reality as often quite distant. 
The upnp module in VLC was quite bloated and had already around 2K lines of code in a single file.
It was impossible to add any more features without some cleaning and refactoring
to make sure the code was maintainable and readable
and any addition did not break existing functionality.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;pupnp.sourceforge.net&#x2F;&quot;&gt;libupnp&lt;&#x2F;a&gt; library provides some nice functions and abstractions over the UPnP
spec but is also highly opinionated which is not necessarily a bad thing.&lt;&#x2F;p&gt;
&lt;p&gt;One of the quirks of &lt;a href=&quot;http:&#x2F;&#x2F;pupnp.sourceforge.net&#x2F;&quot;&gt;libupnp&lt;&#x2F;a&gt; since it creates its own server and listens on a port
for all UPnP operations as well as has internal thread management is we cannot initialize
the instance multiple times and hence need to keep track of the SDK state.&lt;&#x2F;p&gt;
&lt;p&gt;One solution that VLC already employed was to have a wrapper class around the &lt;a href=&quot;http:&#x2F;&#x2F;pupnp.sourceforge.net&#x2F;&quot;&gt;libupnp&lt;&#x2F;a&gt;
SDK and the &lt;code&gt;UpnpClient_Handle&lt;&#x2F;code&gt; that also was a singleton. But it was tightly coupled
with the existing module and had module specific members persist along with the singleton.&lt;&#x2F;p&gt;
&lt;p&gt;I therefore proceeded to refactor out the wrapper class as a standalone singleton
and added methods for anyone interested to listen to callbacks received from the &lt;a href=&quot;http:&#x2F;&#x2F;pupnp.sourceforge.net&#x2F;&quot;&gt;libupnp&lt;&#x2F;a&gt;
SDK. The patches were merged in the mainline VLC tree and call be found here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;git.videolan.org&#x2F;?p=vlc.git;a=commit;h=66839225ff9cea419bd9d578278d35eb3c4db800&quot;&gt;upnp: add and use a callback listener interface&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;git.videolan.org&#x2F;?p=vlc.git;a=commit;h=da4e3c45c04c7cedc692a5fa09af9c511e000365&quot;&gt;upnp: move UpnpInstanceWrapper to upnp-wrapper&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This made the code drastically simpler and understandable as well as providing unlimited
scalability towards libupnp. I could now easily write more modules that depend on libupnp
and reside as their own modules in independent and isolated files.&lt;&#x2F;p&gt;
</content>

        
          <category term="upnp, dlna, upnp&#x2F;dlna, dlna&#x2F;upnp, vlc, casting, stream, media, media renderer, renderer, dlna renderer" />
        

        
          <summary type="html">The latest project that I have been working on lately is adding support for 
casting to DLNA&#x2F;UPNP renderers in VLC.
DLNA renderers, mainly TVâ€™s are DLNA certified devices that are able to play
any media from the local network and is built upon the UPnP A&#x2F;V Architecture technology.
This allows you to cast any video or audio from any other device to your connected TV.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>Protecting Your Privacy in a Post-Aadhar India</title>
        <link href="https://shaleenjain.com/blog/protecting-your-privacy-aadhar/" type="text/html"/>
        <published>Sun, 19 Aug 2018 00:00:00 +0000</published>
        <updated>Sun, 19 Aug 2018 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/protecting-your-privacy-aadhar/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/protecting-your-privacy-aadhar/">&lt;p&gt;With more and more online and offline services demanding Indian citizens to provide
their Aadhar number for availing their services without any legal basis and
necessity under the pretense of proving your identity, it does raise more than
a few privacy concerns.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The unique Aadhar number that is assigned to a person and is printed on the Aadhar Card
is a 12 digit number where the first 11 digits are random and the last number is
a checksum based on &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Verhoeff_algorithm&quot;&gt;Verhoeff&lt;&#x2F;a&gt;&#x27;s algorithm (&lt;a href=&quot;https:&#x2F;&#x2F;www.quora.com&#x2F;What-is-the-structure-of-ones-Aadhar-Card-UID-number&quot;&gt;source&lt;&#x2F;a&gt;) that can be used to verify the
validity of the complete number.&lt;&#x2F;p&gt;
&lt;p&gt;So to get a valid Aadhar number all you need is 11 random digits and their 
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Verhoeff_algorithm&quot;&gt;Verhoeff&lt;&#x2F;a&gt; checksum as the 12th digit.&lt;&#x2F;p&gt;
&lt;p&gt;One example number that passes the above scheme and hence is valid is 
&lt;code&gt;999999990019&lt;&#x2F;code&gt;. This is a test number recommend by UIDAI but many more
numbers can be generated using the same scheme.&lt;&#x2F;p&gt;
&lt;p&gt;So if a system just checks the validity of a Aadhar number using the above scheme
you can safely enter &lt;code&gt;999999990019&lt;&#x2F;code&gt; and continue using their services while protecting
you privacy. That&#x27;s what I did for using Amazon Pay :)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;virtual-number&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#virtual-number&quot; aria-label=&quot;Anchor link for: virtual-number&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Virtual Number&lt;&#x2F;h3&gt;
&lt;p&gt;If you still feel like you have to use a legitimate number but want to minimise infringement
of your right to privacy, consider giving out a &amp;quot;Virtual Number&amp;quot; that is temporary
number that points to your actual Aadhar number without actually revealing your
real Aadhar number. You can use the Virtual Number&#x2F;ID (VID) generator at the 
offical UIDAI &lt;a href=&quot;https:&#x2F;&#x2F;resident.uidai.gov.in&#x2F;web&#x2F;resident&#x2F;vidgeneration&quot;&gt;website&lt;&#x2F;a&gt; or the android &lt;a href=&quot;https:&#x2F;&#x2F;play.google.com&#x2F;store&#x2F;apps&#x2F;details?id=in.gov.uidai.mAadhaarPlus&quot;&gt;mobile app&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Also next time someone asks for a photocopy of your Aadhar card, tell them to f*ck off.&lt;&#x2F;p&gt;
</content>

        
          <category term="aadhar, india, privacy, bharat, dummy, number, test, test number, fake number, fake, generate, aadhar number, uidai, aadhar card, card, protection, circumvent, virtual, virtual number, protect, private, generator, VID, virtual id, id" />
        

        
          <summary type="html">With more and more online and offline services demanding Indian citizens to provide
their Aadhar number for availing their services without any legal basis and
necessity under the pretense of proving your identity, it does raise more than
a few privacy concerns.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>Continuous Marketing - Exploiting Insecure REST API&#x27;s</title>
        <link href="https://shaleenjain.com/blog/continuous-marketing/" type="text/html"/>
        <published>Sun, 08 Jul 2018 00:00:00 +0000</published>
        <updated>Sun, 08 Jul 2018 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/continuous-marketing/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/continuous-marketing/">&lt;p&gt;After I finished refactoring my android app to use a 3rd-party public API for the
user data,
I needed a way to quickly promote my application to users.&lt;&#x2F;p&gt;
&lt;p&gt;The API I used is inherently insecure with virtually no standard REST API security
in place and designed with a top-down approach to suit their own mobile app.
Their whole premise being to secure the mobile app with 2FA and having an API
that&#x27;s quite literally a bunch of wrapper functions around database queries 
exposed as endpoints.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;All their CRUD operations are implemented as GET methods (so much for being idempotent)
and their idea of security is just using a users mobile number to get their
unique user ID that they call &amp;quot;encrypturl&amp;quot;. 2FA is just two separate endpoints
added to send and confirm the OTP send to the user&#x27;s mobile, which again just
advance the mobile flow and are completely orthogonal to the API design.&lt;&#x2F;p&gt;
&lt;p&gt;So I exploited their API yet again to get the email ids of every user they have
in their system by trying every 10 digit combination with the 10th digit always
being either 7, 8 or 9 (majority of Indian mobile phone numbers) until I 
get a hit and receive the users unique id required to access the rest of the API
endpoints.&lt;&#x2F;p&gt;
&lt;p&gt;Using the user-id I get their email-ID from my own API that I built around their
API to have better object models. 
Once I have the email-id I proceed to send them an email promoting my application
designed using the Campaign and Template design editor of &lt;a href=&quot;https:&#x2F;&#x2F;sendgrid.com&quot;&gt;Sendgrid&lt;&#x2F;a&gt; with
their awesome developer API and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sendgrid&#x2F;sendgrid-python&quot;&gt;python&lt;&#x2F;a&gt; library that made programmatically sending
emails a lot more easier.&lt;&#x2F;p&gt;
&lt;p&gt;So with the brute force method I found a new email-id every 5~6 seconds that 
translates into a new promotional email sent with every new email discovered.
And my &amp;quot;Continuous Marketing&amp;quot; is still running with over 15000 emails sent already.&lt;&#x2F;p&gt;
&lt;p&gt;If you as well every find and are willing to exploit an insecure API for at least
marketing gains perhaps this python script will make that a lot more easy for you.&lt;&#x2F;p&gt;
&lt;div &gt;
    &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;shalzz&amp;#x2F;ff60ae09162112db067b9463c76469e0.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
</content>

        
          <category term="api, marketing, rest api, python, sendgrid, sendgrid API, sendgrid python, programmatic, continuous, continuous marketing, exploit, insecure api, email, email promotion, marketing campaign, email campaign, automation, marketing automation" />
        

        
          <summary type="html">After I finished refactoring my android app to use a 3rd-party public API for the
user data,
I needed a way to quickly promote my application to users.
The API I used is inherently insecure with virtually no standard REST API security
in place and designed with a top-down approach to suit their own mobile app.
Their whole premise being to secure the mobile app with 2FA and having an API
that&#x27;s quite literally a bunch of wrapper functions around database queries 
exposed as endpoints.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>My First Mechanical Keyboard - A Review of TADA68</title>
        <link href="https://shaleenjain.com/blog/first-mech-keyboard/" type="text/html"/>
        <published>Sun, 03 Jun 2018 00:00:00 +0000</published>
        <updated>Sun, 03 Jun 2018 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/first-mech-keyboard/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/first-mech-keyboard/">&lt;figure&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;shaleenjain.com&amp;#x2F;processed_images&amp;#x2F;de5a3926b5d945ae00.jpg&quot;  &#x2F;&gt;
&lt;figcaption&gt; TADA68 with the aluminium case&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;why-tada68&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-tada68&quot; aria-label=&quot;Anchor link for: why-tada68&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Why TADA68?&lt;&#x2F;h2&gt;
&lt;p&gt;After first coming across the Keywalker IFD68 on &lt;a href=&quot;https:&#x2F;&#x2F;www.massdrop.com&#x2F;buy&#x2F;keywalker-68-bluetooth-mechanical-keyboard#description?referer=8MUP7X&quot;&gt;Massdrop&lt;&#x2F;a&gt; for just $99
I almost bought it. But after trying to find some reviews online I also
found the &lt;a href=&quot;https:&#x2F;&#x2F;kbdfans.cn&#x2F;products&#x2F;tada68-mechanical-keyboard-gateron-swtich-65-layout-dye-sub-keycaps-cherry-profils?spr_ref=5b12bce&quot;&gt;TADA68&#x2F;SABER68&lt;&#x2F;a&gt; designed by originatives, which is a very similar keyboard
with the exact same 68 key layout and even the type and color of keycaps.&lt;&#x2F;p&gt;
&lt;p&gt;But the few differences that tipped the favor towards me buying the &lt;a href=&quot;https:&#x2F;&#x2F;kbdfans.cn&#x2F;products&#x2F;tada68-mechanical-keyboard-gateron-swtich-65-layout-dye-sub-keycaps-cherry-profils?spr_ref=5b12bce&quot;&gt;TADA68&lt;&#x2F;a&gt;
were; first the Keywalker being a Bluetooth keyboard with an included battery
the shipping increased to be just too expensive, second the Keywalker uses a proprietary
firmware with a flashing tool to program the keyboard only available for windows
platform.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;With the &lt;a href=&quot;https:&#x2F;&#x2F;kbdfans.cn&#x2F;products&#x2F;tada68-mechanical-keyboard-gateron-swtich-65-layout-dye-sub-keycaps-cherry-profils?spr_ref=5b12bce&quot;&gt;TADA68&lt;&#x2F;a&gt; even though not having Bluetooth might seem a con it saves me
from the few quirks that Bluetooth generally has. Mainly depleting my laptop
battery faster than normal due to having the Bluetooth being on all the time and
possible input latency inherent in a shared medium communication channel. 
Besides I told myself if I ever really wanted Bluetooth in the future I could
always just hack together a adafruit feather 32u4 &lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;product&#x2F;2829&quot;&gt;bluefruit&lt;&#x2F;a&gt; which already has existing
support in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;qmk&#x2F;qmk_firmware&quot;&gt;QMK&lt;&#x2F;a&gt; firmware.&lt;&#x2F;p&gt;
&lt;p&gt;Which leads me to definitely the most important factor
in my decision, the &lt;a href=&quot;https:&#x2F;&#x2F;kbdfans.cn&#x2F;products&#x2F;tada68-mechanical-keyboard-gateron-swtich-65-layout-dye-sub-keycaps-cherry-profils?spr_ref=5b12bce&quot;&gt;TADA68&lt;&#x2F;a&gt; runs the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;qmk&#x2F;qmk_firmware&quot;&gt;QMK&lt;&#x2F;a&gt; firmware which is an Open Source firmware
(forked from TMK) for keyboards with a myriad of additional features and
has a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ravicious&#x2F;TADA68&quot;&gt;flashing process&lt;&#x2F;a&gt; that is as simple as it gets with support for all major
platforms.
Also definitely a bonus, the &lt;a href=&quot;https:&#x2F;&#x2F;kbdfans.cn&#x2F;products&#x2F;tada68-mechanical-keyboard-gateron-swtich-65-layout-dye-sub-keycaps-cherry-profils?spr_ref=5b12bce&quot;&gt;TADA68&lt;&#x2F;a&gt; already has a wide variety of aluminium
and wooden cases available in the market unlike the Keywalker IFD68.&lt;&#x2F;p&gt;
&lt;p&gt;Another major factor was the shipping time. With Massdrop the &lt;em&gt;expected&lt;&#x2F;em&gt; shipping
was after three months! For the TADA68 I found a well reputed vendor,
mentioned by various people on the mechanical keyboards subreddit, &lt;a href=&quot;https:&#x2F;&#x2F;kbdfans.myshopify.com?spr_ref=5b12bce&quot;&gt;kbdfans.cn&lt;&#x2F;a&gt;
(also sells on aliexpress) who already had the keyboard in stock.&lt;&#x2F;p&gt;
&lt;p&gt;With all these factors it was a no-brainer to buy the TADA68 and so I did!&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;div class=&quot;image-row&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;shaleenjain.com&amp;#x2F;processed_images&amp;#x2F;4273d1f56fb588ff00.jpg&quot; class=&quot;image-column&quot; &#x2F;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;shaleenjain.com&amp;#x2F;processed_images&amp;#x2F;fb8542e04fd9b24000.jpg&quot; class=&quot;image-column&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;figcaption&gt;TADA68 in its original box and on the right with its stock plastic case&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;the-keyboard-and-the-switches&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-keyboard-and-the-switches&quot; aria-label=&quot;Anchor link for: the-keyboard-and-the-switches&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
The Keyboard and The Switches&lt;&#x2F;h2&gt;
&lt;p&gt;I bought the &lt;a href=&quot;https:&#x2F;&#x2F;kbdfans.cn&#x2F;products&#x2F;tada68-mechanical-keyboard-gateron-swtich-65-layout-dye-sub-keycaps-cherry-profils?spr_ref=5b12bce&quot;&gt;TADA68&lt;&#x2F;a&gt; keyboard with Gateron brown switches. I had originally planned
to buy a keyboard with Cherry MX brown switches having tested and liked the switch
on a 9 switch tester board with 9 different Cherry MX switches that I had bought
earlier from aliexpress. But kbdfans did not have the board with Cherry switches,
only Gateron switches which are Cherry MX clones by a Chinese company, which I had
never tried before.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;shaleenjain.com&amp;#x2F;processed_images&amp;#x2F;8823060dc8f642fd00.jpg&quot;  &#x2F;&gt;
&lt;figcaption&gt;Gateron Brown switches with white leds.&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;&#x2F;br&gt;
&lt;p&gt;Cherry and Gateron switches variants are mainly similar with both companies Blue,
Red, Brown switches having the same travel distance, actuation force, being linear
or tactile and so on. The things that are on spec are same but of course there are
subtle difference between the switches of the two companies due to manufacturing
differences and other advancement and changes they both have made over the years.&lt;&#x2F;p&gt;
&lt;p&gt;Having searched online for comparisons between the Cherry and Gateron Brown
switches mostly were positive reviews for the Gateron Brown with many saying it
does not have the scratchy feeling&#x2F;sound that you get with the Cherry switches
and also it has a somewhat pronounced tactile feedback. So I took a risk in
good faith.
And indeed I feel the same about the Gateron Brown&#x27;s not having that scratchy
sound that I hear with the Cherry Brown switches, kind of a plastic scratching with plastic
sound on every key press. But the tactile feedback did feel quite same to me on both.&lt;&#x2F;p&gt;
&lt;p&gt;The Gateron Brown&#x27;s 45g actuation force does feel a little light when coming from
my laptop&#x27;s membrane switches with what feels like 100g of force,
but they feel good and relaxed after getting some used to. I can also see why
MX Clears with 65g of actuation force with the same tactile feedback as Browns would also
appeal to some people as it is a nice balance between being easy to press
and not having spurious key presses while just resting you fingers (Something
I haven&#x27;t experience with Browns till now).&lt;&#x2F;p&gt;
&lt;p&gt;Along with the keyboard I also bought the &lt;a href=&quot;https:&#x2F;&#x2F;kbdfans.cn&#x2F;products&#x2F;kbdfans-tada68-aluminum-case?variant=2403415687181&amp;amp;spr_ref=5b12bce&quot;&gt;low-profile silver aluminium case&lt;&#x2F;a&gt;
sold by kbdfans, least it got sold out later. And I am definitely glad I did.
An aluminium case gives any keyboard the rigidity and durability that instantly makes
it a premium product. I particularly like a low-profile case than a high-profile one
giving others a glimpse of the excellent technology and engineering that goes into the switches
and the keyboard as a whole, adding to the mechanical keyboard aura.&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;shaleenjain.com&amp;#x2F;processed_images&amp;#x2F;b80976c10dd161f900.jpg&quot;  &#x2F;&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;shaleenjain.com&amp;#x2F;processed_images&amp;#x2F;787c2557f30f4bef00.jpg&quot;  &#x2F;&gt;
&lt;p&gt;Switching out the plastic case with the aluminium one I found out that two screws
were &amp;quot;missing&amp;quot; in the sense that they were not screwed into the cases but stuck between
the PCB and the steel plate. Which can definitely happen while screwing if you
do not have a magnetic screw driver. The fact that the aluminium case came with
aluminium screws is certainly not very help since aluminium is a nonferrous metal
and is not attracted to magnets. So I had to fish out the screws stuck between
the plates since they were indeed made of a ferrous metal and used them to replace
the case.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;shaleenjain.com&amp;#x2F;processed_images&amp;#x2F;46da136023b2baae00.jpg&quot;  &#x2F;&gt;
&lt;figcaption&gt;The bottom of the aluminium case with the anodised feet.&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;br&#x2F;&gt;
&lt;p&gt;Buying a mechanical keyboard right now is just perfect as I have just finished
setting up &lt;a href=&quot;https:&#x2F;&#x2F;shaleenjain.com&#x2F;blog&#x2F;vim-and-tmux&#x2F;&quot;&gt;vim and tmux&lt;&#x2F;a&gt;, requiring extensive use of a
keyboard.&lt;&#x2F;p&gt;
&lt;p&gt;So far it has been only a day and I am really enjoying my new keyboard and 
definitely have had an increase in my productivity, supported
by the fact how long this blog post has already become which I am of course
writing using my new keyboard.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-kbdfans-store&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-kbdfans-store&quot; aria-label=&quot;Anchor link for: the-kbdfans-store&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
The KBDfans store&lt;&#x2F;h2&gt;
&lt;p&gt;I have to mention how awesome my experience has been ordering from &lt;a href=&quot;https:&#x2F;&#x2F;kbdfans.myshopify.com?spr_ref=5b12bce&quot;&gt;kbdfans.cn&lt;&#x2F;a&gt;.
Even though it is a Chinese company the website is very well made
and has I think only an English version which is very well written. There 
are a few details that you may find missing in the product descriptions but they are
generally very active on their FB messenger chat and answer any questions that you may
have.&lt;&#x2F;p&gt;
&lt;p&gt;But perhaps the most amazing thing about them was that after I told them
I am an international customer they happily offered to under declare the product
value for custom duty. Which is something I wasn&#x27;t even aware 
the sellers could do! After briefly going through the custom duty laws of my
country and coming across the clause &amp;quot;... satisfaction of the Customs authorities with the truth and
accuracy of the Declared Value.&amp;quot; (&lt;a href=&quot;http:&#x2F;&#x2F;www.customsandforeigntrade.com&#x2F;Customs%20Valuation.pdf&quot;&gt;Rule 4.1 of the Customs Valuation&lt;&#x2F;a&gt;) I thought
lets try not be too suspicious and told them to declare a value of around $49.9.
But they anyways declared the value as low as they usually do, I guess, to that of
$15! And guess what? It got through!&lt;&#x2F;p&gt;
&lt;p&gt;So I had to pay ~50% duty (which is the general duty rate on anything for
&amp;quot;personal use&amp;quot;) on $15 and an unsurprisingly surprise â‚¹500 &amp;quot;Disbursement fee&amp;quot;
by DHL which I didn&#x27;t see (or notice?) the last time I had imported something
and was completely ignorant about imports and custom duty.&lt;&#x2F;p&gt;
&lt;p&gt;Anyhow in the end the total amount I had to pay for &amp;quot;duty&amp;quot; was 10% of the actual
amount I paid which is definitely great considering how expensive mechanical keyboards
are and how there are really no other alternatives (atleast in India) that would
benefit from trade restrictions. Which leads to my next sections and a general
rant about the socio-economic state of my country. (You have been warned!)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;manufacturing-in-india&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#manufacturing-in-india&quot; aria-label=&quot;Anchor link for: manufacturing-in-india&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Manufacturing in India&lt;&#x2F;h2&gt;
&lt;p&gt;There are no Cherry MX clones being designed and made in India even after the 
original Cherry MX &lt;a href=&quot;https:&#x2F;&#x2F;patents.google.com&#x2F;patent&#x2F;US4467160&quot;&gt;patent&lt;&#x2F;a&gt; has been expired for years.&lt;&#x2F;p&gt;
&lt;p&gt;There is an Indian manufacture of the original Cherry MX switches which is a 
Joint Venture between Cherry (ZF Electronics Corporation) and TVS Group, India
called &lt;a href=&quot;http:&#x2F;&#x2F;zftvs.co.in&#x2F;ZFTVS1&#x2F;default.php&quot;&gt;ZF Electronics TVS (India)&lt;&#x2F;a&gt;. Taking a look at their website, it
already &lt;a href=&quot;http:&#x2F;&#x2F;zftvs.co.in&#x2F;category&#x2F;uncategorized&#x2F;&quot;&gt;hacked&lt;&#x2F;a&gt; by someone 6 months ago and not yet fixed. There also seems
to be a user flow where you can apparently add the &lt;a href=&quot;http:&#x2F;&#x2F;zftvs.co.in&#x2F;product&#x2F;xs-trackball-keyboard-g84-5400&#x2F;&quot;&gt;items&lt;&#x2F;a&gt; to a cart and &amp;quot;checkout&amp;quot;,
which is a completely bogus flow since their is no price information.
So of course don&#x27;t do that unless you want to be spammed and possible be harassed
at your home address.&lt;&#x2F;p&gt;
&lt;p&gt;Assuming the company is still operational with perhaps a lacking IT department, they
are mainly a manufacturing company so it would make sense they only sell in wholesale
and bulk. Their alternate legitimate looking product page for &lt;a href=&quot;http:&#x2F;&#x2F;zftvs.co.in&#x2F;ZFTVS1&#x2F;MX.php&quot;&gt;MX switches&lt;&#x2F;a&gt;
has an option to run a product query and they also seem to be active on
&lt;a href=&quot;https:&#x2F;&#x2F;www.indiamart.com&#x2F;proddetail&#x2F;key-switch-mx-series-8369799588.html&quot;&gt;IndiaMart&lt;&#x2F;a&gt;. So it should be possible for a consumer&#x2F;e-commerce company
to procure the switches in bulk and offer them to consumers.&lt;&#x2F;p&gt;
&lt;p&gt;Unless of course they keep telling themselves that there is not enough demand
in India for &amp;quot;things like these&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;The only e-commerce site I could find that sells Cherry MX switches is
&lt;a href=&quot;https:&#x2F;&#x2F;www.thingbits.net&#x2F;products&#x2F;cherry-mx-switch&quot;&gt;thingbits.net&lt;&#x2F;a&gt; since all their product pages have titles &amp;quot;... in India&amp;quot;
If you look at their price you&#x27;ll see it is way to expensive since they import
all their products and sell it at double the price including the custom duty.&lt;&#x2F;p&gt;
&lt;p&gt;Buying just 68 switches can cost you â‚¹6,338.96 or $93, at this price just 
&lt;a href=&quot;https:&#x2F;&#x2F;www.aliexpress.com&#x2F;item&#x2F;Original-Cherry-mx-switch-3-pin-mechanical-keyboard-brown-blue-red-white-clear-silver-slilent-black&#x2F;32839844484.html?spm=2114.search0104.3.3.53614dcejrotv0&amp;amp;ws_ab_test=searchweb0_0,searchweb201602_2_10152_10151_10065_10344_10068_10342_10343_10059_10340_10341_308_10696_100031_10084_10083_10103_10618_10624_10307_10623_10622_10621_10620,searchweb201603_25,ppcSwitch_5&amp;amp;algo_expid=9cf6af5d-4175-436a-8131-544b32d0aa64-0&amp;amp;algo_pvid=9cf6af5d-4175-436a-8131-544b32d0aa64&amp;amp;priceBeautifyAB=0&quot;&gt;buying&lt;&#x2F;a&gt; and importing with the ~50% import duty on 68 switches you can 
save more than 1&#x2F;4th of the thingsbit price. Their business model of product 
delivery in 3-4 days instead of the 18-28 days (usually faster for the Indian 
subcontinent) with free shipping on &lt;a href=&quot;https:&#x2F;&#x2F;aliexpress.com&quot;&gt;aliexpress&lt;&#x2F;a&gt;, 
with 25% premium doesn&#x27;t make a lot of sense.
Especially since aliexpress has the buyer protection and return&#x2F;refund policies like
any other major e-commerce site.&lt;&#x2F;p&gt;
&lt;p&gt;I have sent them an email urging to source locally and pointed to the suppliers
so that they can get them cheap and pass on the benefit to their customers. 
But I haven&#x27;t heard anything from them yet.&lt;&#x2F;p&gt;
&lt;p&gt;With the government placing restrictions on trade in order to support
local manufacturers and now the &amp;quot;Make in India&amp;quot; movement, their is still no focus
on the bigger picture of encouraging the development of intellectual property 
used in consumer products creating the need for manufacturing.
For example Tata Hitachi and Tata Marcopolo are one of many of the existing Indian breed
industrial companies manufacturing locally but still have JV with Japanese and German
companied providing the patents, technology and products that are actually
manufactured.&lt;&#x2F;p&gt;
&lt;p&gt;For now all we can do is import until there is a boom of the manufacturing industry
in India and the people get over the illusion that skipping over the manufacturing
sector and directly into the service sector by a country as a whole is a good sign of
development.&lt;&#x2F;p&gt;
</content>

        
          <category term="mechanical, mechanical keyboard, cherry mx, gateron brown, tada68, india, in india, review, tada68 review, kbdfans review, kbdfans, cherry mx brown, manufacturing, manufacturing cherry mx in india, low-profile, aluminium case, low profile, aluminium, case, low, profile, keyboard, custom, duty, custom duty, import" />
        

        
          <summary type="html">

 TADA68 with the aluminium case

ðŸ”—
Why TADA68?
After first coming across the Keywalker IFD68 on Massdrop for just $99
I almost bought it. But after trying to find some reviews online I also
found the TADA68&#x2F;SABER68 designed by originatives, which is a very similar keyboard
with the exact same 68 key layout and even the type and color of keycaps.
But the few differences that tipped the favor towards me buying the TADA68
were; first the Keywalker being a Bluetooth keyboard with an included battery
the shipping increased to be just too expensive, second the Keywalker uses a proprietary
firmware with a flashing tool to program the keyboard only available for windows
platform.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>My Vim and Tmux Setup</title>
        <link href="https://shaleenjain.com/blog/vim-and-tmux/" type="text/html"/>
        <published>Sun, 27 May 2018 00:00:00 +0000</published>
        <updated>Sun, 27 May 2018 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/vim-and-tmux/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/vim-and-tmux/">&lt;p&gt;For the past couple of weeks I have been slowly setting up my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shalzz&#x2F;.vim&quot;&gt;Vim&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shalzz&#x2F;dotfiles&quot;&gt;tmux&lt;&#x2F;a&gt;
config files to just the way I prefer, creating the perfect workflow for working on
C&#x2F;C++ and Rust projects that increases my productivity by not only &lt;em&gt;not&lt;&#x2F;em&gt; having to 
constantly switch between the keyboard and the mouse&#x2F;touchpad for every little
task&#x2F;navigation but also to just touch type my way to glory :).
Especially since with C and Rust not having a single canonical IDE and inherently
requiring to interact with the terminal for compiling and debugging, Vim coupled 
with a language server (I&#x27;m using cquery for C&#x2F;C++, RLS for Rust) &lt;em&gt;is&lt;&#x2F;em&gt; the 
perfect IDE for these languages.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Some of the vim plugins that you definitely need for C++ but are hard to find are
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;octol&#x2F;vim-cpp-enhanced-highlight&quot;&gt;vim-cpp-enhanced-highlight&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;majutsushi&#x2F;tagbar&quot;&gt;tagbar&lt;&#x2F;a&gt; with ofcourse a decent language server
like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cquery-project&#x2F;cquery&quot;&gt;cquery&lt;&#x2F;a&gt;. You can find my complete .vim config file &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shalzz&#x2F;.vim&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Vim and tmux work perfectly together and with the tmuxline.vim plugin even more
seamlessly.
One thing that does trip you up while setting up both vim&#x2F;nvim and tmux is 
enabling true color support, &lt;a href=&quot;https:&#x2F;&#x2F;www.cyfyifanchen.com&#x2F;neovim-true-color&#x2F;&quot;&gt;this&lt;&#x2F;a&gt; blog helped me sort that out rather quickly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shaleenjain.com&#x2F;blog&#x2F;vim-and-tmux&#x2F;nvim-and-tmux.jpg&quot; alt=&quot;screenshot&quot; title=&quot;screenshot of my vim setup&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s what my development environment looks like now.&lt;&#x2F;p&gt;
</content>

        
          <category term="vim, tmux, dotfiles, dotconfig, .vimrc, personal, vim config, plugins, cpp, rust, c&#x2F;cpp, c++&#x2F;c, c++ , c, .tmux.conf, nvim, neovim" />
        

        
          <summary type="html">For the past couple of weeks I have been slowly setting up my Vim and tmux
config files to just the way I prefer, creating the perfect workflow for working on
C&#x2F;C++ and Rust projects that increases my productivity by not only not having to 
constantly switch between the keyboard and the mouse&#x2F;touchpad for every little
task&#x2F;navigation but also to just touch type my way to glory :).
Especially since with C and Rust not having a single canonical IDE and inherently
requiring to interact with the terminal for compiling and debugging, Vim coupled 
with a language server (I&#x27;m using cquery for C&#x2F;C++, RLS for Rust) is the 
perfect IDE for these languages.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>Mobile and Desktop Wallets with gRPC</title>
        <link href="https://shaleenjain.com/blog/lnd-wallets/" type="text/html"/>
        <published>Wed, 16 May 2018 00:00:00 +0000</published>
        <updated>Wed, 16 May 2018 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/lnd-wallets/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/lnd-wallets/">&lt;p&gt;Does anyone else also feel that we need lightning [network] desktop and mobile app wallets that can connect to your remote lnd server with gRPC (using rpc username and password) instead of every app loading and syncing their own chain on device? Leading to multiple wallets and coin fragmentation among those wallets.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I know the neutrino light client mode exists but hardly any app at this point lets us use this mode with our own server. Especially with mobile wallets like Eclair that use a json api wrapper over the rpc protocol that just connects to only their own server. &lt;&#x2F;p&gt;
&lt;p&gt;And when their [beta] android wallet does happen to work, I did not find any option to connect to my own server even if I am running the eclair server implementation of the lightning network.  If you are like me you might also be thinking this leads to some amount of centralization.&lt;&#x2F;p&gt;
&lt;p&gt;This is the same problem I felt with bitcoin and bitcoin-core where you had to have the full chain node to use a wallet, which lead to creation of cloud custodian wallets and client side encrypted cloud wallets.&lt;&#x2F;p&gt;
&lt;p&gt;With LND being the second layer over the bitcoin blockchain and needing to stay online as much as possible to be able to negotiate and terminate contracts if your channel peer is misbehaving or trying to steal you funds, it makes sense to have one heavily fortified full-node server running 24&#x2F;7 and have the convenience and ease of use of desktop and mobile wallets pointing to your full-node.&lt;&#x2F;p&gt;
&lt;p&gt;What do you think?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Originally posted on &lt;a href=&quot;https:&#x2F;&#x2F;yalls.org&#x2F;articles&#x2F;a1264e7f-401d-4c46-97a7-7b14e6b54193:926B20A0-5375-4E8A-BC75-D060BD930D7C&#x2F;e5d7864e-e316-4f4a-9db6-0b72410702c6&quot;&gt;yalls.org&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>

        
          <category term="bitcoin, lnd, lightning network, lightning, network, wallets, gRPC, wallet, bitcoin wallet, lightning wallet" />
        

        
          <summary type="html">Does anyone else also feel that we need lightning [network] desktop and mobile app wallets that can connect to your remote lnd server with gRPC (using rpc username and password) instead of every app loading and syncing their own chain on device? Leading to multiple wallets and coin fragmentation among those wallets.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>Prefetching Data with Next.js and Apollo</title>
        <link href="https://shaleenjain.com/blog/nextjs-apollo-prefetch/" type="text/html"/>
        <published>Mon, 08 Jan 2018 00:00:00 +0000</published>
        <updated>Mon, 08 Jan 2018 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/nextjs-apollo-prefetch/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/nextjs-apollo-prefetch/">&lt;blockquote&gt;
&lt;p&gt;Update: My pull requests implementing the techniques discussed here were merged into the zeit&#x2F;next.js &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeit&#x2F;next.js&#x2F;tree&#x2F;canary&#x2F;examples&#x2F;with-data-prefetch&quot;&gt;with-data-prefetch&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeit&#x2F;next.js&#x2F;tree&#x2F;canary&#x2F;examples&#x2F;with-apollo&quot;&gt;with-apollo&lt;&#x2F;a&gt; examples. You can easily combine the various examples (including the above two) to achieve your desired functionality.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For most modern web apps, network speed and latency is still the biggest constraint for high performance and great UX. Universally rendered Isomorphic applications do a great job to solve that to some extent without sacrificing interactivity by processing the complete DOM of the first request on the server and subsequent requests on the client. But there is a lot more we can do.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Modern web apps already have their core application logic on the client by the time the first request completes. From there on anticipating the user action and selectively prefetching the data can lead to great performance and UX improvements.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.apollographql.com&#x2F;client&#x2F;&quot;&gt;Apollo&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeit&#x2F;next.js&quot;&gt;Next&lt;&#x2F;a&gt; is the stack of our choice, having the necessary capabilities, to demonstrate our concept.&lt;&#x2F;p&gt;
&lt;p&gt;Adam Soffer&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;dev-blog.apollodata.com&#x2F;whats-next-js-for-apollo-e4dfe835d070&quot;&gt;introduction&lt;&#x2F;a&gt; summarizes &lt;a href=&quot;https:&#x2F;&#x2F;www.apollographql.com&#x2F;client&#x2F;&quot;&gt;Apollo&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeit&#x2F;next.js&quot;&gt;Next&lt;&#x2F;a&gt; with their concerns perfectly:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apollo is a GraphQL client thatâ€™s concerned exclusively with the data layer of our application; it cares about efficiently fetching our data. Next, on the other hand, is a minimalistic framework for server-rendered React applications thatâ€™s concerned exclusively with the UI layer of our application; it cares about efficiently rendering our UI.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;tying-together-next-js-and-apollo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tying-together-next-js-and-apollo&quot; aria-label=&quot;Anchor link for: tying-together-next-js-and-apollo&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Tying together Next.js and Apollo&lt;&#x2F;h2&gt;
&lt;p&gt;Next has a unique way of loading data, every page has a lifecycle hook function &lt;code&gt;getInitialProps&lt;&#x2F;code&gt; which is called while loading on the client as well as the server. This is a very nice separation of our data logic from the UI logic and is what enables us to use the full power of Apollo and Next as both of these frameworks make no assumptions about each others layer and provides the perfect abstraction to connects these two layers.&lt;&#x2F;p&gt;
&lt;p&gt;Apollo client&#x27;s react library &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apollographql&#x2F;react-apollo&quot;&gt;react-apollo&lt;&#x2F;a&gt; provides a helper function &lt;code&gt;getDataFromTree&lt;&#x2F;code&gt; which recursively traverses the supplied React component and executes every &lt;code&gt;graphql()&lt;&#x2F;code&gt; query it finds, storing the result in its local cache (configured by us).&lt;&#x2F;p&gt;
&lt;p&gt;The excellent &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeit&#x2F;next.js&#x2F;tree&#x2F;canary&#x2F;examples&#x2F;with-apollo&quot;&gt;example&lt;&#x2F;a&gt; from the Next.js repo shows how we can combine these two functionalities by creating a HOC which wraps &lt;code&gt;getDataFromTree&lt;&#x2F;code&gt; within &lt;code&gt;getInitialProps&lt;&#x2F;code&gt; and returning the cached data as a plain Javascript Object&lt;&#x2F;p&gt;
&lt;p&gt;Here we make sure to use &lt;code&gt;getDataFromTree&lt;&#x2F;code&gt; on both the client and for SSR, altering the example like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;React &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;react&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;PropTypes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;prop-types&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ ApolloProvider, getDataFromTree } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;react-apollo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Head &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;next&#x2F;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;initApollo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;.&#x2F;initApollo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ComposedComponent =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;WithData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;React&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;displayName = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;WithData(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getComponentDisplayName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
      ComposedComponent
    )}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;`
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;propTypes = {
      serverState: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;PropTypes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.object.isRequired
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInitialProps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; Initial serverState with apollo (empty)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;serverState

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; Evaluate the composed component&amp;#39;s getInitialProps()
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;composedInitialProps = {}
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ComposedComponent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.getInitialProps) {
        composedInitialProps = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;await ComposedComponent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInitialProps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ctx)
      }

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; Run all GraphQL queries in the component tree
      &#x2F;&#x2F; and extract the resulting data
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;apollo = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;initApollo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; Run all GraphQL queries
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getDataFromTree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;ComposedComponent ctx={ctx} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;composedInitialProps} &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
          {
            router: {
              asPath: ctx.asPath,
              pathname: ctx.pathname,
              query: ctx.query
            },
            client: apollo,
          }
        )
      } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(error) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; Prevent Apollo Client GraphQL errors from crashing SSR.
        &#x2F;&#x2F; Handle them in components via the data.error prop:
        &#x2F;&#x2F; https:&#x2F;&#x2F;www.apollographql.com&#x2F;docs&#x2F;react&#x2F;basics&#x2F;queries.html#graphql-query-data-error
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.browser) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; getDataFromTree does not call componentWillUnmount
        &#x2F;&#x2F; head side effect therefore need to be cleared manually
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;rewind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
      }

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; Extract query data from the Apollo store
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;serverState = {
        apollo: {
          data: apollo.cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;extract&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
        }
      }

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        serverState,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;composedInitialProps
      }
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(props)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.apollo = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;initApollo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.props.serverState.apollo.data)
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;ApolloProvider client={this.apollo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;
          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;ComposedComponent {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.props} &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;
        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ApolloProvider&amp;gt;
      )
    }
  }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;prefetching-data&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#prefetching-data&quot; aria-label=&quot;Anchor link for: prefetching-data&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Prefetching Data&lt;&#x2F;h2&gt;
&lt;p&gt;Next has &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeit&#x2F;next.js#with-link-1&quot;&gt;in-built&lt;&#x2F;a&gt; support for prefetching pages by adding the &lt;code&gt;prefetch&lt;&#x2F;code&gt; prop to the &lt;code&gt;&amp;lt;Link&amp;gt;&lt;&#x2F;code&gt; component or imperatively calling &lt;code&gt;Router.prefetch(&#x27;&#x2F;dynamic&#x27;)}&lt;&#x2F;code&gt;. However this fetches the page&#x27;s JS code but not its data&#x2F;initial props.&lt;&#x2F;p&gt;
&lt;p&gt;This results in instant page loads but, some would argue even worse, a loading indicator shown for however long it takes to get the relevant page data from your API.&lt;&#x2F;p&gt;
&lt;p&gt;Since we know our stack we can optimise performance using that knowledge. We know that with every call to &lt;code&gt;getInitialProps&lt;&#x2F;code&gt; of a component wrapped in our &lt;code&gt;WithData&lt;&#x2F;code&gt; HOC, our queries are cached in the local ApolloClient store. With that all we have to do is get a reference to our top level page component and manually call its &lt;code&gt;getInitialProps&lt;&#x2F;code&gt; method!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Router &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;next&#x2F;router&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ format, resolve, parse } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;prefetch = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; if  we&amp;#39;re running server side do nothing
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;typeof window &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;url =
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;href !== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(href)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;href

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ pathname } = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.location

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;parsedHref = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(pathname, url)

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ query } =
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;href !== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;href
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(url, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; get component reference
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Component = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;await Router&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;prefetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(parsedHref)

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; fetch the component props
  &#x2F;&#x2F; and cache locally, handled within getInitialProps
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp; Component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.getInitialProps) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;ctx = { pathname: href, query, isVirtualCall: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;await Component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInitialProps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ctx)
  }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can then call this throughout our application, like for example:
&lt;code&gt;&amp;lt;a onMouseOver={() =&amp;gt; prefetch(&amp;quot;&#x2F;product?sku=0001&amp;quot;)}&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This will load not only our product.js page but also all the specific graphql queries into the ApolloClient store.&lt;&#x2F;p&gt;
</content>

        
          <category term="nextjs, apollo, apollo-server, next.js, prefetch, performance, graphql, react, react.js, apollo-client" />
        

        
          <summary type="html">
Update: My pull requests implementing the techniques discussed here were merged into the zeit&#x2F;next.js with-data-prefetch and with-apollo examples. You can easily combine the various examples (including the above two) to achieve your desired functionality.

For most modern web apps, network speed and latency is still the biggest constraint for high performance and great UX. Universally rendered Isomorphic applications do a great job to solve that to some extent without sacrificing interactivity by processing the complete DOM of the first request on the server and subsequent requests on the client. But there is a lot more we can do.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>Fuzzing libVLC - Final Report</title>
        <link href="https://shaleenjain.com/blog/fuzzing-vlc-4/" type="text/html"/>
        <published>Mon, 28 Aug 2017 00:00:00 +0000</published>
        <updated>Wed, 10 Jan 2018 00:00:00 +0530</updated>
        <id>https://shaleenjain.com/blog/fuzzing-vlc-4/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/fuzzing-vlc-4/">&lt;blockquote&gt;
&lt;p&gt;Update: My fuzz targets have been merged into the VLC mainline tree by commits &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;74e7bd240d5b239d0eeb3b67a7511b8b83cb6694&quot;&gt;74e7bd2&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;b83e9fe08d12ae798390bfa64c08096801fcd8c1&quot;&gt;b83e9f2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Introduction to my GSoC project &lt;a href=&quot;https:&#x2F;&#x2F;shaleenjain.com&#x2F;blog&#x2F;why-fuzz-vlc&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Majority of the parsing code of VLC has been successfully setup to be fuzzed by:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The demux fuzz target which creates an input stream from the fuzzed input provided by libfuzzer,
probes and loads an appropriate demux module and demultiplexes the input into the various output
elementary streams, minimally handling all the ES callbacks and calling various demux_Control&#x27;s to
increase code coverage.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;ul&gt;
&lt;li&gt;The decoder fuzz target by creating a packetizer and a decoder instance while ignoring the
stream out, packetizing the input block and then proceeding to decode the various packetized blocks.
Hardware decoding as been disabled, so that we only test the codecs included in VLC and the module itself
though many of the codecs are provided by 3rd party libraries.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These two fuzz targets cover over 35 demux modules and 64 different codec modules or 163k lines of code
which is 20.7% of the VLC code base.&lt;&#x2F;p&gt;
&lt;p&gt;Actual code coverage as measured by libFuzzer would be different if not more but since as of now
VLC is unable to build with the clang linker, I do not have that coverage information.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;some-additional-challenges-and-features-were&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#some-additional-challenges-and-features-were&quot; aria-label=&quot;Anchor link for: some-additional-challenges-and-features-were&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Some additional challenges and features were&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;adding first class support for sanitizers in the VLC build system.
You can now compile VLC with sanitizers just by using the --with-sanitizer switch.
These changes are merged into the mainline, more details &lt;a href=&quot;http:&#x2F;&#x2F;git.videolan.org&#x2F;?p=vlc.git;a=commit;h=2bc9957c615d9505f89d88511a0d6ef3889b392b&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;finding and adding sample inputs of various video file formats and containers
and elementary streams encoded with different codecs for the fuzz targets&lt;&#x2F;li&gt;
&lt;li&gt;Creating a dictionary of various tokens and FourCC&#x27;s used to separate the various
chunks and atoms in container formats.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;code&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#code&quot; aria-label=&quot;Anchor link for: code&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Code&lt;&#x2F;h4&gt;
&lt;p&gt;Since VideoLAN has still not decided whether to use Google&#x27;s OSS-fuzz or agree to their terms
and doesn&#x27;t want this code to be misused by hackers, they have decided not to keep this in
the mainline tree to minimize exposure.&lt;&#x2F;p&gt;
&lt;p&gt;And so here are all of my out of tree patches:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;git.videolan.org&#x2F;?p=vlc.git;a=commit;h=57949e7a9b9da4d9130db0359199b16fca1b061c&quot;&gt;57949e7a9b9da4d9130db0359199b16fca1b061c&lt;&#x2F;a&gt; (merged)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;git.videolan.org&#x2F;?p=vlc.git;a=commit;h=2bc9957c615d9505f89d88511a0d6ef3889b392b&quot;&gt;2bc9957c615d9505f89d88511a0d6ef3889b392b&lt;&#x2F;a&gt; (merged)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.videolan.org&#x2F;GSoC2017&#x2F;shalzz&#x2F;vlc&#x2F;commit&#x2F;583b4b6ed83e64cf52ab75d0d5163a360d626ec6&quot;&gt;583b4b6ed83e64cf52ab75d0d5163a360d626ec6&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.videolan.org&#x2F;GSoC2017&#x2F;shalzz&#x2F;vlc&#x2F;commit&#x2F;89cc31145c47cb3769d9c3258a1d2baa4d563c37&quot;&gt;89cc31145c47cb3769d9c3258a1d2baa4d563c37&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.videolan.org&#x2F;GSoC2017&#x2F;shalzz&#x2F;vlc&#x2F;commit&#x2F;c893f6597efc23cf234af12f09d05510c0c744c3&quot;&gt;c893f6597efc23cf234af12f09d05510c0c744c3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.videolan.org&#x2F;GSoC2017&#x2F;shalzz&#x2F;vlc&#x2F;commit&#x2F;ef80ea254005e84589dd310abe87ce0d3d2a0c90&quot;&gt;ef80ea254005e84589dd310abe87ce0d3d2a0c90&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.videolan.org&#x2F;GSoC2017&#x2F;shalzz&#x2F;vlc&#x2F;commit&#x2F;f03556549bd074f724d47901bd58d730d12998d6&quot;&gt;f03556549bd074f724d47901bd58d730d12998d6&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.videolan.org&#x2F;GSoC2017&#x2F;shalzz&#x2F;vlc&#x2F;commit&#x2F;23f2e30f4a6241bc3476414ac187d1e7e8169dd3&quot;&gt;23f2e30f4a6241bc3476414ac187d1e7e8169dd3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;My main work repo has been &lt;a href=&quot;https:&#x2F;&#x2F;code.videolan.org&#x2F;GSoC2017&#x2F;shalzz&#x2F;vlc&#x2F;&quot;&gt;code.videolan.org&#x2F;GSoC2017&#x2F;shalzz&#x2F;vlc&lt;&#x2F;a&gt; with all my commit history
in the master branch and final patches in the &lt;a href=&quot;https:&#x2F;&#x2F;code.videolan.org&#x2F;GSoC2017&#x2F;shalzz&#x2F;vlc&#x2F;tree&#x2F;release&quot;&gt;release&lt;&#x2F;a&gt; branch.
There is a clone of the repo on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Shalzz&#x2F;vlc&quot;&gt;github&lt;&#x2F;a&gt; as well.&lt;&#x2F;p&gt;
&lt;p&gt;To run the code,&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;clone the repo and build vlc instrumented with one or more of the sanitizers using the new
&lt;code&gt;--with-sanitizer=&lt;&#x2F;code&gt; switch.&lt;&#x2F;li&gt;
&lt;li&gt;Get and build libFuzzer by changing into the test&#x2F;fuzz&#x2F; directory and using the &lt;code&gt;.&#x2F;build-libfuzzer.sh&lt;&#x2F;code&gt; script&lt;&#x2F;li&gt;
&lt;li&gt;Build the fuzz target binaries by running &lt;code&gt;make check&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Run the fuzz targets manually or by using the &lt;code&gt;.&#x2F;run-fuzzer.sh&lt;&#x2F;code&gt; helper script&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;bug-trophy&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bug-trophy&quot; aria-label=&quot;Anchor link for: bug-trophy&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Bug Trophy&lt;&#x2F;h4&gt;
&lt;p&gt;As for the number of bugs found by the initial fuzzing done on my small laptop there have been quite a few, all of which have been fixed, by me and other VLC developers.
Few of them:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;6c947b775d4d6c6ed07ebde140bddd3a2007b41a&quot;&gt;6c947b775d4d6c6ed07ebde140bddd3a2007b41a&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;a672ea060efbb5898e1d80327f5909a43e8b57d8&quot;&gt;a672ea060efbb5898e1d80327f5909a43e8b57d8&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;b2fb79e3201c5ce77a176b52936835ce195aa986&quot;&gt;b2fb79e3201c5ce77a176b52936835ce195aa986&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;1de4047a25cd336d1539ea0867c29180928dd230&quot;&gt;1de4047a25cd336d1539ea0867c29180928dd230&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;7033852e1a8292734e1d5800bec864bb5fb24c30&quot;&gt;7033852e1a8292734e1d5800bec864bb5fb24c30&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;3266d738e906b38b53f7936f58565441d0652713&quot;&gt;3266d738e906b38b53f7936f58565441d0652713&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;4b76784615f74254a7b66e34ff78393b44af2ed5&quot;&gt;4b76784615f74254a7b66e34ff78393b44af2ed5&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;7eea089393d6fc1de3436b4d486a466d14566a04&quot;&gt;7eea089393d6fc1de3436b4d486a466d14566a04&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;continuous-fuzzing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#continuous-fuzzing&quot; aria-label=&quot;Anchor link for: continuous-fuzzing&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Continuous Fuzzing&lt;&#x2F;h4&gt;
&lt;p&gt;One thing that&#x27;s left to do is setting up of a continuous fuzzing server.
Since OSS-fuzz is not in the picture right now, that is something VLC devs
will have to do on their own infrastructure.&lt;&#x2F;p&gt;
</content>

        
          <category term="libfuzzer, libvlc, vlc, fuzzing, gsoc-2017, gsoc" />
        

        
          <summary type="html">
Update: My fuzz targets have been merged into the VLC mainline tree by commits 74e7bd2, b83e9f2.


Introduction to my GSoC project here

Majority of the parsing code of VLC has been successfully setup to be fuzzed by:

The demux fuzz target which creates an input stream from the fuzzed input provided by libfuzzer,
probes and loads an appropriate demux module and demultiplexes the input into the various output
elementary streams, minimally handling all the ES callbacks and calling various demux_Control&#x27;s to
increase code coverage.

</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>Fuzzing libVLC - Improvements</title>
        <link href="https://shaleenjain.com/blog/fuzzing-vlc-3/" type="text/html"/>
        <published>Sat, 08 Jul 2017 00:00:00 +0000</published>
        <updated>Sat, 08 Jul 2017 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/fuzzing-vlc-3/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/fuzzing-vlc-3/">&lt;p&gt;I have been making some few specific improvement to demux fuzz target
and also working on the decoder target side by side which isn&#x27;t done yet.&lt;&#x2F;p&gt;
&lt;p&gt;Some general improvements that I have made for all fuzz targets is 
abstracting away and initializing the parent &lt;code&gt;libvlc_instance_t&lt;&#x2F;code&gt; object in
&lt;code&gt;LLVMFuzzerInitialize&lt;&#x2F;code&gt; which obviously has some performance improvements
as it isn&#x27;t created and destroyed on every run of the &lt;code&gt;LLVMFuzzerTestOneInput&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h4 id=&quot;fuzzer-common-c&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fuzzer-common-c&quot; aria-label=&quot;Anchor link for: fuzzer-common-c&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
fuzzer_common.c&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;assert.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;gt;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;fuzzer.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; libvlc_instance_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;p_libvlc;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LLVMFuzzerInitialize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;***&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
{
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setenv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;VLC_PLUGIN_PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;..&#x2F;..&#x2F;modules&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
	p_libvlc = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;libvlc_new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(p_libvlc != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LLVMFuzzerTestOneInput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint8_t *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;size_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;FuzzerTestOneInput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(buf, len, p_libvlc);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;FuzzerCleanup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;libvlc_release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(p_libvlc);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another benefit of this abstraction is that our fuzz targets are now completely
agnostic to the fuzzing engine we use which has been &lt;a href=&quot;http:&#x2F;&#x2F;llvm.org&#x2F;docs&#x2F;LibFuzzer.html#startup-initialization&quot;&gt;libFuzzer&lt;&#x2F;a&gt; until now.
We can now use the exact same target with &lt;a href=&quot;http:&#x2F;&#x2F;lcamtuf.coredump.cx&#x2F;afl&#x2F;&quot;&gt;AFL&lt;&#x2F;a&gt; by writing a driver,
since AFL expects a main function, here is an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;llvm-mirror&#x2F;compiler-rt&#x2F;blob&#x2F;58d43607862096aeb32d72173911c9df244a30f1&#x2F;lib&#x2F;fuzzer&#x2F;afl&#x2F;afl_driver.cpp&quot;&gt;example&lt;&#x2F;a&gt; driver.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dictionaries&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dictionaries&quot; aria-label=&quot;Anchor link for: dictionaries&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
Dictionaries&lt;&#x2F;h3&gt;
&lt;p&gt;At this point the demux fuzzer had found a few more bugs but it
had kind of reached a saturation point in terms of the line coverage it
had and it just wasn&#x27;t increasing any more significantly with new sample input.&lt;&#x2F;p&gt;
&lt;p&gt;So I decided instead of adding sample files of every possible video 
file format with different types of chunks and atoms that VLC supports,
to create a keywords dictionary of magic values of the various file formats
and feed it to the demux target. Libfuzzer has in-built support for
dictionary files and can much more efficiently create structured inputs
with it.&lt;&#x2F;p&gt;
&lt;p&gt;libFuzzer and AFL have the same syntax of dictionary files and the AFL project
even has some excellent dictionaries for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mcarpenter&#x2F;afl&#x2F;blob&#x2F;master&#x2F;dictionaries&#x2F;jpeg.dict&quot;&gt;JPEG&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mcarpenter&#x2F;afl&#x2F;blob&#x2F;master&#x2F;dictionaries&#x2F;png.dict&quot;&gt;PNG&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mcarpenter&#x2F;afl&#x2F;blob&#x2F;master&#x2F;dictionaries&#x2F;gif.dict&quot;&gt;GIF&lt;&#x2F;a&gt; file formats.
And you guessed it VLC can actually &amp;quot;Play&amp;quot; those files as well since &lt;code&gt;ffmpeg&lt;&#x2F;code&gt;
provides their codec as well.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m still working on the dictionary and I&#x27;ll maybe post it once it&#x27;s 
completed or if it&#x27;s ever merged into the VLC codebase.&lt;&#x2F;p&gt;
</content>

        
          <category term="libfuzzer, libvlc, vlc, fuzzing, gsoc-2017, gsoc" />
        

        
          <summary type="html">I have been making some few specific improvement to demux fuzz target
and also working on the decoder target side by side which isn&#x27;t done yet.
Some general improvements that I have made for all fuzz targets is 
abstracting away and initializing the parent libvlc_instance_t object in
LLVMFuzzerInitialize which obviously has some performance improvements
as it isn&#x27;t created and destroyed on every run of the LLVMFuzzerTestOneInput.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>Fuzzing libVLC - De-multiplexer</title>
        <link href="https://shaleenjain.com/blog/fuzzing-vlc-2/" type="text/html"/>
        <published>Sat, 24 Jun 2017 00:00:00 +0000</published>
        <updated>Wed, 05 Jul 2017 00:00:00 +0530</updated>
        <id>https://shaleenjain.com/blog/fuzzing-vlc-2/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/fuzzing-vlc-2/">&lt;p&gt;So, I have been working on writing a fuzz target for the demux API for the past
two weeks and I have reached a point where it has a good code coverage
and has already found some few shallow bugs. &lt;&#x2F;p&gt;
&lt;p&gt;Here are some of the stacktraces libfuzzer spit out and all of them were fixed
rather promptly.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;A Segfault on a null pointer, fixed by adding a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;6c947b775d4d6c6ed07ebde140bddd3a2007b41a&quot;&gt;null check&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==25241==ERROR: AddressSanitizer: SEGV on unknown address 0xffffffffffffff68 (pc 0x7f56c19e8ab0 bp 0xffffffffffffff58 sp 0x7ffcdfe59e58 T0)
==25241==The signal is caused by a READ memory access.
    #0 0x7f56c19e8aaf  (&#x2F;usr&#x2F;lib&#x2F;libpthread.so.0+0x9aaf)
    #1 0x7f56c275c5e1 in Lookup misc&#x2F;variables.c:158
    #2 0x7f56c275c5e1 in AddCallback misc&#x2F;variables.c:839
    #3 0x7f56c275c5e1 in var_AddCallback misc&#x2F;variables.c:884
    #4 0x7f56b336a55e in blurayOpen access&#x2F;bluray.c:674
    #5 0x7f56c26df59d in module_load modules&#x2F;modules.c:183
    #6 0x7f56c26dfb43 in vlc_module_load modules&#x2F;modules.c:275
    #7 0x7f56c2704dec in demux_NewAdvanced input&#x2F;demux.c:259
    #8 0x7f56c2705236 in demux_New input&#x2F;demux.c:151
    #9 0x40575b in LLVMFuzzerTestOneInput &#x2F;home&#x2F;shalzz&#x2F;builds&#x2F;vlc&#x2F;test&#x2F;fuzz&#x2F;libvlc_demux_fuzzer.cpp:73
    #10 0x416714 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) FuzzerLoop.cpp:458
    #11 0x416983 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long) FuzzerLoop.cpp:397
    #12 0x41714d in fuzzer::Fuzzer::MutateAndTestOne() FuzzerLoop.cpp:596
    #13 0x417397 in fuzzer::Fuzzer::Loop() FuzzerLoop.cpp:624
    #14 0x410438 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) FuzzerDriver.cpp:744
    #15 0x405c40 in main FuzzerMain.cpp:20
    #16 0x7f56c0089439 in __libc_start_main (&#x2F;usr&#x2F;lib&#x2F;libc.so.6+0x20439)
    #17 0x404ee9 in _start (&#x2F;home&#x2F;shalzz&#x2F;builds&#x2F;vlc&#x2F;test&#x2F;fuzz&#x2F;.libs&#x2F;lt-libvlc_demux_fuzzer+0x404ee9)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Abort due to character conversion without a conversion descriptor, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;a672ea060efbb5898e1d80327f5909a43e8b57d8&quot;&gt;fixed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==32703== ERROR: libFuzzer: deadly signal
    #0 0x7f46cd57fb68 in __sanitizer_print_stack_trace &#x2F;build&#x2F;gcc-multilib&#x2F;src&#x2F;gcc&#x2F;libsanitizer&#x2F;asan&#x2F;asan_stack.cc:36
    #1 0x468961 in fuzzer::Fuzzer::CrashCallback() FuzzerLoop.cpp:195
    #2 0x46892d in fuzzer::Fuzzer::StaticCrashSignalCallback() FuzzerLoop.cpp:179
    #3 0x7f46cc83993f  (&#x2F;usr&#x2F;lib&#x2F;libpthread.so.0+0x1193f)
    #4 0x7f46cbf8d66f in raise (&#x2F;usr&#x2F;lib&#x2F;libc.so.6+0x3366f)
    #5 0x7f46cbf8ecff in __GI_abort (&#x2F;usr&#x2F;lib&#x2F;libc.so.6+0x34cff)
    #6 0x7f46cce9996f in vlc_iconv extras&#x2F;libc.c:391
    #7 0x7f46ccf3e083 in vlc_stream_ReadLine input&#x2F;stream.c:321
    #8 0x7f4690b96342 in peek_Readline demux&#x2F;subtitle_helper.h:38
    #9 0x7f4690b96b02 in Open demux&#x2F;vobsub.c:128
    #10 0x7f46cce9b2dc in generic_start modules&#x2F;modules.c:356
    #11 0x7f46cce9a508 in module_load modules&#x2F;modules.c:183
    #12 0x7f46cce9abd6 in vlc_module_load modules&#x2F;modules.c:279
    #13 0x7f46cce9b42d in module_need modules&#x2F;modules.c:371
    #14 0x7f46cceef2bd in demux_NewAdvanced input&#x2F;demux.c:259
    #15 0x7f46cceeeadd in demux_New input&#x2F;demux.c:151
    #16 0x458a46 in LLVMFuzzerTestOneInput (&#x2F;home&#x2F;shalzz&#x2F;builds&#x2F;vlc-clean&#x2F;test&#x2F;fuzz&#x2F;libvlc_demux_fuzzer+0x458a46)
    #17 0x469754 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) FuzzerLoop.cpp:458
    #18 0x4699c3 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long) FuzzerLoop.cpp:397
    #19 0x45f421 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) FuzzerDriver.cpp:268
    #20 0x463034 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) FuzzerDriver.cpp:683
    #21 0x458c80 in main FuzzerMain.cpp:20
    #22 0x7f46cbf7a439 in __libc_start_main (&#x2F;usr&#x2F;lib&#x2F;libc.so.6+0x20439)
    #23 0x458239 in _start (&#x2F;home&#x2F;shalzz&#x2F;builds&#x2F;vlc-clean&#x2F;test&#x2F;fuzz&#x2F;libvlc_demux_fuzzer+0x458239)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A heap-use-after-free, fixed by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;b2fb79e3201c5ce77a176b52936835ce195aa986&quot;&gt;this&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commit&#x2F;1de4047a25cd336d1539ea0867c29180928dd230&quot;&gt;this&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==26135==ERROR: AddressSanitizer: heap-use-after-free on address 0x613000005a00 at pc 0x7f4549af4c64 bp 0x7ffcb951f110 sp 0x7ffcb951e8b8
    READ of size 4 at 0x613000005a00 thread T0
        #0 0x7f4549af4c63 in __interceptor_memcmp &#x2F;build&#x2F;gcc-multilib&#x2F;src&#x2F;gcc&#x2F;libsanitizer&#x2F;sanitizer_common&#x2F;sanitizer_common_interceptors.inc:626
        #1 0x7f453871981c in Open demux&#x2F;image.c:640
        #2 0x7f4548ffdb26 in generic_start modules&#x2F;modules.c:356
        #3 0x7f4548ffca56 in module_load modules&#x2F;modules.c:183
        #4 0x7f4548ffd2e5 in vlc_module_load modules&#x2F;modules.c:279
        #5 0x7f4548ffdc77 in module_need modules&#x2F;modules.c:371
        #6 0x7f4549076c84 in demux_NewAdvanced input&#x2F;demux.c:259
        #7 0x7f4549075fc2 in demux_New input&#x2F;demux.c:151
        #8 0x405ce5 in LLVMFuzzerTestOneInput &#x2F;home&#x2F;shalzz&#x2F;builds&#x2F;vlc&#x2F;test&#x2F;fuzz&#x2F;libvlc_demux_fuzzer.cpp:68
        #9 0x4169d4 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) FuzzerLoop.cpp:458
        #10 0x416c43 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long) FuzzerLoop.cpp:397
        #11 0x41740d in fuzzer::Fuzzer::MutateAndTestOne() FuzzerLoop.cpp:596
        #12 0x417657 in fuzzer::Fuzzer::Loop() FuzzerLoop.cpp:624
        #13 0x4106f8 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) FuzzerDriver.cpp:744
        #14 0x405f00 in main FuzzerMain.cpp:20
        #15 0x7f45464b0439 in __libc_start_main (&#x2F;usr&#x2F;lib&#x2F;libc.so.6+0x20439)
        #16 0x404e49 in _start (&#x2F;home&#x2F;shalzz&#x2F;builds&#x2F;vlc&#x2F;test&#x2F;fuzz&#x2F;.libs&#x2F;lt-libvlc_demux_fuzzer+0x404e49)
     
    0x613000005a00 is located 128 bytes inside of 380-byte region [0x613000005980,0x613000005afc)
    freed by thread T0 here:
        #0 0x7f4549b234c8 in __interceptor_free &#x2F;build&#x2F;gcc-multilib&#x2F;src&#x2F;gcc&#x2F;libsanitizer&#x2F;asan&#x2F;asan_malloc_linux.cc:45
        #1 0x7f4549193fc7 in block_generic_Release misc&#x2F;block.c:99
        #2 0x7f4549193a3c in block_Release ..&#x2F;include&#x2F;vlc_block.h:184
        #3 0x7f4549194de2 in block_TryRealloc misc&#x2F;block.c:212
        #4 0x7f45490e89bb in vlc_stream_Peek input&#x2F;stream.c:506
        #5 0x7f4538717037 in IsPnm demux&#x2F;image.c:354
        #6 0x7f45387195bd in Open demux&#x2F;image.c:634
        #7 0x7f4548ffdb26 in generic_start modules&#x2F;modules.c:356
        #8 0x7f4548ffca56 in module_load modules&#x2F;modules.c:183
        #9 0x7f4548ffd2e5 in vlc_module_load modules&#x2F;modules.c:279
        #10 0x7f4548ffdc77 in module_need modules&#x2F;modules.c:371
        #11 0x7f4549076c84 in demux_NewAdvanced input&#x2F;demux.c:259
        #12 0x7f4549075fc2 in demux_New input&#x2F;demux.c:151
        #13 0x405ce5 in LLVMFuzzerTestOneInput &#x2F;home&#x2F;shalzz&#x2F;builds&#x2F;vlc&#x2F;test&#x2F;fuzz&#x2F;libvlc_demux_fuzzer.cpp:68
        #14 0x4169d4 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) FuzzerLoop.cpp:458
        #15 0x416c43 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long) FuzzerLoop.cpp:397
        #16 0x41740d in fuzzer::Fuzzer::MutateAndTestOne() FuzzerLoop.cpp:596
        #17 0x417657 in fuzzer::Fuzzer::Loop() FuzzerLoop.cpp:624
        #18 0x4106f8 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) FuzzerDriver.cpp:744
        #19 0x405f00 in main FuzzerMain.cpp:20
        #20 0x7f45464b0439 in __libc_start_main (&#x2F;usr&#x2F;lib&#x2F;libc.so.6+0x20439)
     
    previously allocated by thread T0 here:
        #0 0x7f4549b23860 in __interceptor_malloc &#x2F;build&#x2F;gcc-multilib&#x2F;src&#x2F;gcc&#x2F;libsanitizer&#x2F;asan&#x2F;asan_malloc_linux.cc:62
        #1 0x7f4549194434 in block_Alloc misc&#x2F;block.c:128
        #2 0x7f4549194c77 in block_TryRealloc misc&#x2F;block.c:205
        #3 0x7f45490e89bb in vlc_stream_Peek input&#x2F;stream.c:506
        #4 0x7f4539fc5e24 in DetectPVRHeadersAndHeaderSize demux&#x2F;mpeg&#x2F;ts.c:256
        #5 0x7f4539fc6272 in Open demux&#x2F;mpeg&#x2F;ts.c:357
        #6 0x7f4548ffdb26 in generic_start modules&#x2F;modules.c:356
        #7 0x7f4548ffca56 in module_load modules&#x2F;modules.c:183
        #8 0x7f4548ffd2e5 in vlc_module_load modules&#x2F;modules.c:279
        #9 0x7f4548ffdc77 in module_need modules&#x2F;modules.c:371
        #10 0x7f4549076c84 in demux_NewAdvanced input&#x2F;demux.c:259
        #11 0x7f4549075fc2 in demux_New input&#x2F;demux.c:151
        #12 0x405ce5 in LLVMFuzzerTestOneInput &#x2F;home&#x2F;shalzz&#x2F;builds&#x2F;vlc&#x2F;test&#x2F;fuzz&#x2F;libvlc_demux_fuzzer.cpp:68
        #13 0x4169d4 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) FuzzerLoop.cpp:458
        #14 0x416c43 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long) FuzzerLoop.cpp:397
        #15 0x41740d in fuzzer::Fuzzer::MutateAndTestOne() FuzzerLoop.cpp:596
        #16 0x417657 in fuzzer::Fuzzer::Loop() FuzzerLoop.cpp:624
        #17 0x4106f8 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) FuzzerDriver.cpp:744
        #18 0x405f00 in main FuzzerMain.cpp:20
        #19 0x7f45464b0439 in __libc_start_main (&#x2F;usr&#x2F;lib&#x2F;libc.so.6+0x20439)
     
    SUMMARY: AddressSanitizer: heap-use-after-free &#x2F;build&#x2F;gcc-multilib&#x2F;src&#x2F;gcc&#x2F;libsanitizer&#x2F;sanitizer_common&#x2F;sanitizer_common_interceptors.inc:626 in __interceptor_memcmp
    Shadow bytes around the buggy address:
      0x0c267fff8af0: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
      0x0c267fff8b00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      0x0c267fff8b10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      0x0c267fff8b20: 00 00 00 00 00 fa fa fa fa fa fa fa fa fa fa fa
      0x0c267fff8b30: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
    =&amp;gt;0x0c267fff8b40:[fd]fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
      0x0c267fff8b50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
      0x0c267fff8b60: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
      0x0c267fff8b70: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
      0x0c267fff8b80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
      0x0c267fff8b90: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    Shadow byte legend (one shadow byte represents 8 application bytes):
      Addressable:           00
      Partially addressable: 01 02 03 04 05 06 07
      Heap left redzone:       fa
      Freed heap region:       fd
      Stack left redzone:      f1
      Stack mid redzone:       f2
      Stack right redzone:     f3
      Stack after return:      f5
      Stack use after scope:   f8
      Global redzone:          f9
      Global init order:       f6
      Poisoned by user:        f7
      Container overflow:      fc
      Array cookie:            ac
      Intra object redzone:    bb
      ASan internal:           fe
      Left alloca redzone:     ca
      Right alloca redzone:    cb
    ==26135==ABORTING
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately I cannot publish my source code yet or start integrating with oss-fuzz and cluster fuzz
by Google as VideoLAN&#x2F;Labs is still undecided and would rather do this privately, mostly because they
don&#x27;t want to be bound by Google&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;googleprojectzero.blogspot.in&#x2F;2015&#x2F;02&#x2F;feedback-and-data-driven-updates-to.html&quot;&gt;bug disclosure&lt;&#x2F;a&gt; policy.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;del&gt;I think they are just confused that they have to do a software release within the specified
deadline when it&#x27;s just a bug disclosure, but whatever.&lt;&#x2F;del&gt;
(There&#x27;s no longer any confusion.)&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Update: You can find all my bug fixes and patches &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;vlc&#x2F;commits&#x2F;master?author=Shalzz&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>

        
          <category term="libfuzzer, libvlc, vlc, fuzzing, gsoc-2017, gsoc" />
        

        
          <summary type="html">So, I have been working on writing a fuzz target for the demux API for the past
two weeks and I have reached a point where it has a good code coverage
and has already found some few shallow bugs. 
Here are some of the stacktraces libfuzzer spit out and all of them were fixed
rather promptly.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>Fuzzing libVLC - The Architecture</title>
        <link href="https://shaleenjain.com/blog/fuzzing-vlc-1/" type="text/html"/>
        <published>Sat, 10 Jun 2017 00:00:00 +0000</published>
        <updated>Sat, 24 Jun 2017 00:00:00 +0530</updated>
        <id>https://shaleenjain.com/blog/fuzzing-vlc-1/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/fuzzing-vlc-1/">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Introduction to this blog post &lt;a href=&quot;https:&#x2F;&#x2F;shaleenjain.com&#x2F;blog&#x2F;why-fuzz-vlc&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-architecture&quot; aria-label=&quot;Anchor link for: the-architecture&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
The Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;I met with the VLC developers and my mentor at the VideoLabs office 
in Paris and after a few meetings and discussions we had a pretty good
idea on how we could fuzz test libVLC and the VLC core most appropriately.&lt;&#x2F;p&gt;
&lt;p&gt;In VLC, except the core, everything is a module.
There are over 200+ modules in VLC along with libVLCCore and libVLC.&lt;&#x2F;p&gt;
&lt;p&gt;The main module categories that take an input are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Access&lt;&#x2F;li&gt;
&lt;li&gt;Access-demuxer&lt;&#x2F;li&gt;
&lt;li&gt;Demuxer&lt;&#x2F;li&gt;
&lt;li&gt;Packetizer&lt;&#x2F;li&gt;
&lt;li&gt;Decoder&lt;&#x2F;li&gt;
&lt;li&gt;Video filter&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The VLC core tries to load the modules of these categories in the following order:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Access =&amp;gt; Demux =&amp;gt; [Packetizer] =&amp;gt; Decoder =&amp;gt; [Filter] =&amp;gt; Out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We decided we would fuzz test at least the demux 
&lt;abbr title=&quot;Application Programming Interface&quot;&gt;API&lt;&#x2F;abbr&gt;, the decoder API,
the packetizer API and possibly the video filter API&#x27;s which loads modules with these
capabilities.&lt;&#x2F;p&gt;
&lt;p&gt;Along with writing the fuzz targets for these API&#x27;s, I also need to provide a 
corpus of sample input so that libfuzzer can provide a structured input according
to the video format&#x2F;codec and not trip up the parse just because the basic headers and
magic numbers were not in place.&lt;&#x2F;p&gt;
&lt;p&gt;We have an end goal of eventually setting up an continuous fuzzing server either on ClusterFuzz
by OSS-Fuzz or a server hosted by VideoLan.
Using OSS-Fuzz has a lot of advantages such as their 1000+ CPU infrastructure,
streamlined process, automated issue tracker, well tested and good documentation.
But we have yet to decided which direction we&#x27;ll go from here.&lt;&#x2F;p&gt;
</content>

        
          <category term="libfuzzer, libvlc, vlc, fuzzing, gsoc-2017, gsoc" />
        

        
          <summary type="html">
Introduction to this blog post here

ðŸ”—
The Architecture
I met with the VLC developers and my mentor at the VideoLabs office 
in Paris and after a few meetings and discussions we had a pretty good
idea on how we could fuzz test libVLC and the VLC core most appropriately.
In VLC, except the core, everything is a module.
There are over 200+ modules in VLC along with libVLCCore and libVLC.
The main module categories that take an input are:

Access
Access-demuxer
Demuxer
Packetizer
Decoder
Video filter

</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>VLC Media Player and Fuzz testing</title>
        <link href="https://shaleenjain.com/blog/why-fuzz-vlc/" type="text/html"/>
        <published>Mon, 15 May 2017 00:00:00 +0000</published>
        <updated>Sat, 08 Jul 2017 00:00:00 +0530</updated>
        <id>https://shaleenjain.com/blog/why-fuzz-vlc/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/why-fuzz-vlc/">&lt;p&gt;Software bugs and vulnerabilities can be difficult to detect and slow to find
even when actively searched for by developers and users who usually look for
superficial functional and visual bugs.&lt;&#x2F;p&gt;
&lt;p&gt;In a large software especially those written in middle level languages like C&#x2F;C++,
security bugs and vulnerabilities can often be used to comprise the whole system.
Mainly because memory management is left to the programmers of the individual software.&lt;&#x2F;p&gt;
&lt;p&gt;One alternative to human Q&amp;amp;A testing is to use automated software testing techniques
like Fuzzing where random, invalid or unexpected data is provided as input to a computer
program.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Fuzzing is often more cost-effective than systematic testing 
techniques&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#fn-cite_report_random_testing&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
High profile CVE&#x27;s such as &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Heartbleed&quot;&gt;Heartbleed&lt;&#x2F;a&gt; in April 2014
and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shellshock_(software_bug)&quot;&gt;Shellshock&lt;&#x2F;a&gt; in September 2014
could have easily been found with fuzzing&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#fn-cite_heartbleed&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#fn-cite_shellshock&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Media processing is always a complex task and usually contain lots of security and
stability issues, take &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Stagefright_%28bug%29&quot;&gt;Stagefright&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;security.googleblog.com&#x2F;2014&#x2F;01&#x2F;ffmpeg-and-thousand-fixes.html&quot;&gt;FFmpeg and a thousand fixes&lt;&#x2F;a&gt;, for example.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Fuzzing VLC&lt;&#x2F;strong&gt;, the most popular desktop and mobile media player should now seem
like a no-brainer.&lt;&#x2F;p&gt;
&lt;p&gt;Indeed, this was one of the project ideas and my proposal to VideoLAN for
Fuzz testing VLC as part of &lt;abbr title=&quot;Google Summer of Code&quot;&gt;GSoC&lt;&#x2F;abbr&gt; 2017.
VideoLAN accepted my &lt;a href=&quot;https:&#x2F;&#x2F;summerofcode.withgoogle.com&#x2F;projects&#x2F;#5893995166171136&quot;&gt;proposal&lt;&#x2F;a&gt; and invited me to their office
in Paris for a &amp;quot;GSoC conference&amp;quot; to discuss and help setting up the project
and get me started.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;fn-cite_report_random_testing&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;dl.acm.org&#x2F;citation.cfm?id=802530&quot;&gt;&amp;quot;A report on random testing&amp;quot;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;fn-cite_heartbleed&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.hboeck.de&#x2F;archives&#x2F;868-How-Heartbleed-couldve-been-found.html&quot;&gt;&amp;quot;How Heartbleed could&#x27;ve been found (in English)&amp;quot;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;fn-cite_shellshock&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;lcamtuf.blogspot.in&#x2F;2014&#x2F;10&#x2F;bash-bug-how-we-finally-cracked.html&quot;&gt;&amp;quot;Bash bug: the other two RCEs, or how we chipped away at the original fix (CVE-2014-6277 and &#x27;78)&amp;quot;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>

        
          <category term="libfuzzer, libvlc, vlc, fuzzing, gsoc-2017, gsoc" />
        

        
          <summary type="html">Software bugs and vulnerabilities can be difficult to detect and slow to find
even when actively searched for by developers and users who usually look for
superficial functional and visual bugs.
In a large software especially those written in middle level languages like C&#x2F;C++,
security bugs and vulnerabilities can often be used to comprise the whole system.
Mainly because memory management is left to the programmers of the individual software.
One alternative to human Q&amp;amp;A testing is to use automated software testing techniques
like Fuzzing where random, invalid or unexpected data is provided as input to a computer
program.
</summary>
        

    </entry>
    <entry xml:lang="en">
        <title>Trusting a Self-signed SSL Certificate</title>
        <link href="https://shaleenjain.com/blog/ssl-socket-facotry-java/" type="text/html"/>
        <published>Fri, 27 Dec 2013 00:00:00 +0000</published>
        <updated>Fri, 27 Dec 2013 00:00:00 +0000</updated>
        <id>https://shaleenjain.com/blog/ssl-socket-facotry-java/</id>
        <content type="html" xml:base="https://shaleenjain.com/blog/ssl-socket-facotry-java/">&lt;p&gt;When connecting to a server which has setup their SSL encryption with a self-signed certificate
through a Java or an android app, you&#x27;ll get an SSLException since their certificate isn&#x27;t signed
by a Certificate Authorities (CA) which is a 3rd party who is trusted by everyone.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;javax.net.ssl.SSLException: Not trusted server certificate exception
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you have access to the server or know the site admin, get them to buy a CA signed SSL certificate.&lt;&#x2F;p&gt;
&lt;p&gt;But in case that is not possible or feasible we can one thing we can do is
configure our HTTP client library to just not verify the site hostname with the certificate.
But then again that is not a good solution and defeats the whole purpose of encryption.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;A more elegant solution is to tell the client library to explicitly trust a certificate.
We&#x27;ll have to manually get a copy of the site&#x27;s self-signed certificate that we can use
to tell our client to trust.&lt;&#x2F;p&gt;
&lt;p&gt;Java has a couple of HTTP clients, mainly:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Apache HTTP client&lt;&#x2F;li&gt;
&lt;li&gt;HttpUrlConnection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You&#x27;ll find that when using Apache Http client we&#x27;ll have to create a custom SSLSocketFactory to implement the above 
functionality.
And for HttpUrlConnection set a custom SSLSocket to the connection as described at &lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;training&#x2F;articles&#x2F;security-ssl.html&quot;&gt;developer.android.com&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Here is a reference implementation that does just that.&lt;&#x2F;p&gt;
&lt;div &gt;
    &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;shalzz&amp;#x2F;8125772.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;h4 id=&quot;for-httpurlconnection&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#for-httpurlconnection&quot; aria-label=&quot;Anchor link for: for-httpurlconnection&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
For HttpURLConnection&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;MySSLSocketFactory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sslf = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;KeyStore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ks = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;MySSLSocketFactory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getKeystoreOfCA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getResources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;openRawResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.raw.myCert));
    sslf = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new MySSLSocketFactory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ks);
} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;finally &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    sslf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fixHttpsURLConnection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we create a &lt;code&gt;Keystore&lt;&#x2F;code&gt; containing our certificate, in this case &lt;code&gt;myCert&lt;&#x2F;code&gt;.
Which we then use to get an instance of &lt;code&gt;MySSLSocketFactory&lt;&#x2F;code&gt; and then call its non static &lt;code&gt;fixHttpsURLConnection()&lt;&#x2F;code&gt; method.
This sets the SSLSocketFactory created as the default SSLSocketFactory for HttpURLConnection. &lt;&#x2F;p&gt;
&lt;h4 id=&quot;for-apache-http-client&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#for-apache-http-client&quot; aria-label=&quot;Anchor link for: for-apache-http-client&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;
For Apache Http Client&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;MySSLSocketFactory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sslf = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;DefaultHttpClient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; client  = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;KeyStore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ks = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;MySSLSocketFactory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getKeystoreOfCA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getResources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;openRawResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.raw.myCert));
    client  = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;MySSLSocketFactory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getNewHttpClient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ks);
} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case we get a &lt;code&gt;DefaultHttpClient&lt;&#x2F;code&gt; created with the &lt;code&gt;KeyStore&lt;&#x2F;code&gt; containing our Certificates.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Originally posted at &lt;a href=&quot;https:&#x2F;&#x2F;coding-euphoria.blogspot.in&#x2F;2013&#x2F;12&#x2F;custom-sslsocketfactory-that-trusts.html&quot;&gt;coding-euphoria.blogspot.in&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
Edited and updated on 20&#x2F;07&#x2F;2017&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>

        
          <category term="java, android, SSL, SSLException, self-signed" />
        

        
          <summary type="html">When connecting to a server which has setup their SSL encryption with a self-signed certificate
through a Java or an android app, you&#x27;ll get an SSLException since their certificate isn&#x27;t signed
by a Certificate Authorities (CA) which is a 3rd party who is trusted by everyone.

javax.net.ssl.SSLException: Not trusted server certificate exception

If you have access to the server or know the site admin, get them to buy a CA signed SSL certificate.
But in case that is not possible or feasible we can one thing we can do is
configure our HTTP client library to just not verify the site hostname with the certificate.
But then again that is not a good solution and defeats the whole purpose of encryption.
</summary>
        

    </entry>
</feed>
